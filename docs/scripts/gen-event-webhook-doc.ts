import fs from "node:fs";
import path from "node:path";
import {
  notificationEvents,
  notificationEventPayload,
} from "back-end/src/events/base-types";
import { z } from "zod";

const basePath = path.resolve(path.dirname(process.argv[1]), "..");

const TARGET = `${basePath}/src/partials/event-webhook/_event-webhook-list.md`;

const typeScriptSchema = async <T extends z.ZodTypeAny>(schema: T) => {
  const { printZodAsTs } = await import("@ephys/zod-to-ts");
  const result = printZodAsTs({ schemas: [schema] });
  return result;
};

const events = Object.keys(notificationEvents).reduce(
  (events, resource) => [
    ...events,
    ...Object.keys(notificationEvents[resource])
      .filter((event) => !notificationEvents[resource][event].noDoc)
      .map((event) => ({
        name: `${resource}.${event}`,
        description: notificationEvents[resource][event].description,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        payload: notificationEventPayload(resource as any, event as any),
      })),
  ],
  [],
);

const eventTableEntry = ({ name, description }) =>
  `| **[${name}](#${name.replace(/\./g, "")})** | ${description} |`;

const quote = "```";

const eventEntry = async ({ name, description, payload }) => `
### ${name}

${description}

<details>
  <summary>Payload</summary>

${quote}typescript
${await typeScriptSchema(payload)}
${quote}
</details>
`;

const content = async () => {
  const eventEntries = await Promise.all(events.map(eventEntry));

  return `<!-- This content is autogenerated by \`yarn gen\` -->

  | Event name | Description |
  |------------|-------------|
  ${events.map(eventTableEntry).join("\n")}
  ${eventEntries.join("\n")}
`;
};

(async () => {
  fs.writeFileSync(TARGET, await content());
})();
