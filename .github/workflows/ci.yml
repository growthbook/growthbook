name: CI

on: [push]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Get yarn cache directory
        id: yarn-cache
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: install dependencies
        run: |
          yarn
        env:
          CI: true

      - name: lint
        run: |
          yarn lint
          yarn type-check

      - name: test
        run: |
          # Run the test suite
          yarn test

          # Cleanup
          rm -rf packages/front-end/coverage
          rm -rf packages/back-end/coverage

      - name: check for file changes
        id: changes
        run: |
          # All changes in this push
          FILE_CHANGES=$(git diff --name-only HEAD^ HEAD)

          # See if any changes were made to the back-end
          HAS_BACKEND_CHANGES=$(echo "$FILE_CHANGES" | grep -qP 'yarn.lock|back-end' && echo "true" || echo "false")
          echo "::set-output name=backend::${HAS_BACKEND_CHANGES}"

          # See if any changes were made to the app (front-end or back-end)
          HAS_APP_CHANGES=$(echo "$FILE_CHANGES" | grep -qP 'ci.yml|yarn.lock|package.json|Dockerfile|back-end|front-end' && echo "true" || echo "false")
          echo "::set-output name=app::${HAS_APP_CHANGES}"
      
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' && steps.changes.outputs.app == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build, tag, and push image to Docker Hub
        if: github.ref == 'refs/heads/main' && steps.changes.outputs.app == 'true'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the docker image
          docker build -t growthbook/growthbook:latest -t growthbook/growthbook:$IMAGE_TAG .
          docker push growthbook/growthbook

      - name: Configure AWS credentials for Growth Book Cloud
        if: github.ref == 'refs/heads/main' && steps.changes.outputs.backend == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy Back-end to ECS for Growth Book Cloud
        if: github.ref == 'refs/heads/main' && steps.changes.outputs.backend == 'true'
        run:
          aws ecs update-service --cluster prod-api --service prod-api --force-new-deployment --region us-east-1
