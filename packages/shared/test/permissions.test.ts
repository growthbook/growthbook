import { roleToPermissionMap } from "back-end/src/util/organization.util";
import { OrganizationInterface } from "back-end/types/organization";
import { Permissions } from "../permissions";

describe("Role permissions", () => {
  const testOrg: OrganizationInterface = {
    id: "org_sktwi1id9l7z9xkjb",
    name: "Test Org",
    ownerEmail: "test@test.com",
    url: "https://test.com",
    dateCreated: new Date(),
    invites: [],
    members: [],
    settings: {
      environments: [{ id: "production" }],
    },
  };

  function getPermissions(role: string) {
    return new Permissions(
      {
        global: {
          permissions: roleToPermissionMap(role, testOrg),
          limitAccessByEnvironment: false,
          environments: [],
        },
        projects: {},
      },
      false
    );
  }

  const project = "";
  const projects = [];
  const projectResource = { project: "" };
  const projectsResource = { projects: [] };
  const environmentsResource = { projects: [], id: "" };
  const envs = ["production"];
  const sdkConnection = { projects: [], environment: "" };
  const updates = {};
  const event = { containsSecrets: false, projects: [] };
  const secretEvent = { containsSecrets: true, projects: [] };

  it("has correct permissions for noaccess", () => {
    const p = getPermissions("noaccess");
    expect(p.canAddComment(projects)).toBe(false);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(false);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(false);
    expect(p.canCreateAttribute(projectsResource)).toBe(false);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(false);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(false);
    expect(p.canCreateFactMetric(projectsResource)).toBe(false);
    expect(p.canCreateFactTable(projectsResource)).toBe(false);
    expect(p.canCreateFeature(projectResource)).toBe(false);
    expect(p.canCreateIdea(projectResource)).toBe(false);
    expect(p.canCreateMetric(projectsResource)).toBe(false);
    expect(p.canCreateNamespace()).toBe(false);
    expect(p.canCreatePresentation()).toBe(false);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(false);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canCreateSavedGroup()).toBe(false);
    expect(p.canCreateSegment()).toBe(false);
    expect(p.canCreateVisualChange(projectResource)).toBe(false);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(false);
    expect(p.canDeleteAttribute(projectsResource)).toBe(false);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(false);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(false);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(false);
    expect(p.canDeleteFactTable(projectsResource)).toBe(false);
    expect(p.canDeleteFeature(projectResource)).toBe(false);
    expect(p.canDeleteIdea(projectResource)).toBe(false);
    expect(p.canDeleteMetric(projectsResource)).toBe(false);
    expect(p.canDeleteNamespace()).toBe(false);
    expect(p.canDeletePresentation()).toBe(false);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(false);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canDeleteSavedGroup()).toBe(false);
    expect(p.canDeleteSegment()).toBe(false);
    expect(p.canDeleteTag()).toBe(false);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(false);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(false);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(false);
    expect(p.canRunExperiment(projectResource, envs)).toBe(false);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunFactQueries(projectsResource)).toBe(false);
    expect(p.canRunHealthQueries(projectsResource)).toBe(false);
    expect(p.canRunMetricQueries(projectsResource)).toBe(false);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(false);
    expect(p.canRunTestQueries(projectsResource)).toBe(false);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(false);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(false);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(false);
    expect(p.canUpdateDimension()).toBe(false);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(false);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(false);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(false);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateNamespace()).toBe(false);
    expect(p.canUpdatePresentation()).toBe(false);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(false);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canUpdateSavedGroup()).toBe(false);
    expect(p.canUpdateSegment()).toBe(false);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(false);
    expect(p.canViewAttributeModal()).toBe(false);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(false);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(false);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(false);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(false);
    expect(p.canViewFeatureModal()).toBe(false);
    expect(p.canViewIdeaModal()).toBe(false);
    expect(p.canViewReportModal()).toBe(false);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(false);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(false);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(false);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(false);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(false);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(false);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(false);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(false);
    expect(p.canReadSingleProjectResource(project)).toBe(false);
    expect(p.canReadMultiProjectResource(projects)).toBe(false);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for readonly", () => {
    const p = getPermissions("readonly");
    expect(p.canAddComment(projects)).toBe(false);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(false);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(false);
    expect(p.canCreateAttribute(projectsResource)).toBe(false);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(false);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(false);
    expect(p.canCreateFactMetric(projectsResource)).toBe(false);
    expect(p.canCreateFactTable(projectsResource)).toBe(false);
    expect(p.canCreateFeature(projectResource)).toBe(false);
    expect(p.canCreateIdea(projectResource)).toBe(false);
    expect(p.canCreateMetric(projectsResource)).toBe(false);
    expect(p.canCreateNamespace()).toBe(false);
    expect(p.canCreatePresentation()).toBe(false);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(false);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canCreateSavedGroup()).toBe(false);
    expect(p.canCreateSegment()).toBe(false);
    expect(p.canCreateVisualChange(projectResource)).toBe(false);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(false);
    expect(p.canDeleteAttribute(projectsResource)).toBe(false);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(false);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(false);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(false);
    expect(p.canDeleteFactTable(projectsResource)).toBe(false);
    expect(p.canDeleteFeature(projectResource)).toBe(false);
    expect(p.canDeleteIdea(projectResource)).toBe(false);
    expect(p.canDeleteMetric(projectsResource)).toBe(false);
    expect(p.canDeleteNamespace()).toBe(false);
    expect(p.canDeletePresentation()).toBe(false);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(false);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canDeleteSavedGroup()).toBe(false);
    expect(p.canDeleteSegment()).toBe(false);
    expect(p.canDeleteTag()).toBe(false);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(false);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(false);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(false);
    expect(p.canRunExperiment(projectResource, envs)).toBe(false);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunFactQueries(projectsResource)).toBe(false);
    expect(p.canRunHealthQueries(projectsResource)).toBe(false);
    expect(p.canRunMetricQueries(projectsResource)).toBe(false);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(false);
    expect(p.canRunTestQueries(projectsResource)).toBe(false);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(false);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(false);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(false);
    expect(p.canUpdateDimension()).toBe(false);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(false);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(false);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(false);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateNamespace()).toBe(false);
    expect(p.canUpdatePresentation()).toBe(false);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(false);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canUpdateSavedGroup()).toBe(false);
    expect(p.canUpdateSegment()).toBe(false);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(false);
    expect(p.canViewAttributeModal()).toBe(false);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(false);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(false);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(false);
    expect(p.canViewFeatureModal()).toBe(false);
    expect(p.canViewIdeaModal()).toBe(false);
    expect(p.canViewReportModal()).toBe(false);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(false);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(false);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(false);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(false);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(false);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(false);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(false);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(false);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for visualEditor", () => {
    const p = getPermissions("visualEditor");
    expect(p.canAddComment(projects)).toBe(false);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(false);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(false);
    expect(p.canCreateAttribute(projectsResource)).toBe(false);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(false);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(false);
    expect(p.canCreateFactMetric(projectsResource)).toBe(false);
    expect(p.canCreateFactTable(projectsResource)).toBe(false);
    expect(p.canCreateFeature(projectResource)).toBe(false);
    expect(p.canCreateIdea(projectResource)).toBe(false);
    expect(p.canCreateMetric(projectsResource)).toBe(false);
    expect(p.canCreateNamespace()).toBe(false);
    expect(p.canCreatePresentation()).toBe(false);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(false);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canCreateSavedGroup()).toBe(false);
    expect(p.canCreateSegment()).toBe(false);
    expect(p.canCreateVisualChange(projectResource)).toBe(true);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(false);
    expect(p.canDeleteAttribute(projectsResource)).toBe(false);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(false);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(false);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(false);
    expect(p.canDeleteFactTable(projectsResource)).toBe(false);
    expect(p.canDeleteFeature(projectResource)).toBe(false);
    expect(p.canDeleteIdea(projectResource)).toBe(false);
    expect(p.canDeleteMetric(projectsResource)).toBe(false);
    expect(p.canDeleteNamespace()).toBe(false);
    expect(p.canDeletePresentation()).toBe(false);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(false);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canDeleteSavedGroup()).toBe(false);
    expect(p.canDeleteSegment()).toBe(false);
    expect(p.canDeleteTag()).toBe(false);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(false);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(false);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(false);
    expect(p.canRunExperiment(projectResource, envs)).toBe(false);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunFactQueries(projectsResource)).toBe(false);
    expect(p.canRunHealthQueries(projectsResource)).toBe(false);
    expect(p.canRunMetricQueries(projectsResource)).toBe(false);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(false);
    expect(p.canRunTestQueries(projectsResource)).toBe(false);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(false);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(false);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(false);
    expect(p.canUpdateDimension()).toBe(false);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(false);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(false);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(false);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateNamespace()).toBe(false);
    expect(p.canUpdatePresentation()).toBe(false);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(false);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canUpdateSavedGroup()).toBe(false);
    expect(p.canUpdateSegment()).toBe(false);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(true);
    expect(p.canViewAttributeModal()).toBe(false);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(false);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(false);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(false);
    expect(p.canViewFeatureModal()).toBe(false);
    expect(p.canViewIdeaModal()).toBe(false);
    expect(p.canViewReportModal()).toBe(false);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(false);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(false);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(false);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(false);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(false);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(false);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(false);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(false);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for collaborator", () => {
    const p = getPermissions("collaborator");
    expect(p.canAddComment(projects)).toBe(true);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(false);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(false);
    expect(p.canCreateAttribute(projectsResource)).toBe(false);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(false);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(false);
    expect(p.canCreateFactMetric(projectsResource)).toBe(false);
    expect(p.canCreateFactTable(projectsResource)).toBe(false);
    expect(p.canCreateFeature(projectResource)).toBe(false);
    expect(p.canCreateIdea(projectResource)).toBe(true);
    expect(p.canCreateMetric(projectsResource)).toBe(false);
    expect(p.canCreateNamespace()).toBe(false);
    expect(p.canCreatePresentation()).toBe(true);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(false);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canCreateSavedGroup()).toBe(false);
    expect(p.canCreateSegment()).toBe(false);
    expect(p.canCreateVisualChange(projectResource)).toBe(false);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(false);
    expect(p.canDeleteAttribute(projectsResource)).toBe(false);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(false);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(false);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(false);
    expect(p.canDeleteFactTable(projectsResource)).toBe(false);
    expect(p.canDeleteFeature(projectResource)).toBe(false);
    expect(p.canDeleteIdea(projectResource)).toBe(true);
    expect(p.canDeleteMetric(projectsResource)).toBe(false);
    expect(p.canDeleteNamespace()).toBe(false);
    expect(p.canDeletePresentation()).toBe(true);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(false);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canDeleteSavedGroup()).toBe(false);
    expect(p.canDeleteSegment()).toBe(false);
    expect(p.canDeleteTag()).toBe(false);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(false);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(false);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(false);
    expect(p.canRunExperiment(projectResource, envs)).toBe(false);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunFactQueries(projectsResource)).toBe(false);
    expect(p.canRunHealthQueries(projectsResource)).toBe(false);
    expect(p.canRunMetricQueries(projectsResource)).toBe(false);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(false);
    expect(p.canRunTestQueries(projectsResource)).toBe(false);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(false);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(false);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(false);
    expect(p.canUpdateDimension()).toBe(false);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(false);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(false);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(true);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateNamespace()).toBe(false);
    expect(p.canUpdatePresentation()).toBe(true);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(false);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canUpdateSavedGroup()).toBe(false);
    expect(p.canUpdateSegment()).toBe(false);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(false);
    expect(p.canViewAttributeModal()).toBe(false);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(false);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(false);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(false);
    expect(p.canViewFeatureModal()).toBe(false);
    expect(p.canViewIdeaModal()).toBe(true);
    expect(p.canViewReportModal()).toBe(false);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(false);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(false);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(false);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(false);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(false);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(false);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(false);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(false);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for engineer", () => {
    const p = getPermissions("engineer");
    expect(p.canAddComment(projects)).toBe(true);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(true);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(true);
    expect(p.canCreateAttribute(projectsResource)).toBe(true);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(false);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(false);
    expect(p.canCreateFactMetric(projectsResource)).toBe(false);
    expect(p.canCreateFactTable(projectsResource)).toBe(false);
    expect(p.canCreateFeature(projectResource)).toBe(true);
    expect(p.canCreateIdea(projectResource)).toBe(true);
    expect(p.canCreateMetric(projectsResource)).toBe(false);
    expect(p.canCreateNamespace()).toBe(true);
    expect(p.canCreatePresentation()).toBe(true);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(false);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canCreateSavedGroup()).toBe(true);
    expect(p.canCreateSegment()).toBe(false);
    expect(p.canCreateVisualChange(projectResource)).toBe(true);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(true);
    expect(p.canDeleteAttribute(projectsResource)).toBe(true);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(false);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(false);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(false);
    expect(p.canDeleteFactTable(projectsResource)).toBe(false);
    expect(p.canDeleteFeature(projectResource)).toBe(true);
    expect(p.canDeleteIdea(projectResource)).toBe(true);
    expect(p.canDeleteMetric(projectsResource)).toBe(false);
    expect(p.canDeleteNamespace()).toBe(true);
    expect(p.canDeletePresentation()).toBe(true);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(false);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canDeleteSavedGroup()).toBe(true);
    expect(p.canDeleteSegment()).toBe(false);
    expect(p.canDeleteTag()).toBe(true);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(true);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(true);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(true);
    expect(p.canRunExperiment(projectResource, envs)).toBe(true);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunFactQueries(projectsResource)).toBe(false);
    expect(p.canRunHealthQueries(projectsResource)).toBe(false);
    expect(p.canRunMetricQueries(projectsResource)).toBe(false);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(false);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(false);
    expect(p.canRunTestQueries(projectsResource)).toBe(false);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(true);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(true);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(false);
    expect(p.canUpdateDimension()).toBe(false);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(false);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(false);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(true);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(true);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(false);
    expect(p.canUpdateNamespace()).toBe(true);
    expect(p.canUpdatePresentation()).toBe(true);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(false);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canUpdateSavedGroup()).toBe(true);
    expect(p.canUpdateSegment()).toBe(false);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(true);
    expect(p.canViewAttributeModal()).toBe(true);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(false);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(false);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(false);
    expect(p.canViewFeatureModal()).toBe(true);
    expect(p.canViewIdeaModal()).toBe(true);
    expect(p.canViewReportModal()).toBe(false);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(false);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(false);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(true);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(true);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(true);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(true);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(true);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(true);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for analyst", () => {
    const p = getPermissions("analyst");
    expect(p.canAddComment(projects)).toBe(true);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(true);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(false);
    expect(p.canCreateAttribute(projectsResource)).toBe(false);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(true);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(true);
    expect(p.canCreateFactMetric(projectsResource)).toBe(true);
    expect(p.canCreateFactTable(projectsResource)).toBe(true);
    expect(p.canCreateFeature(projectResource)).toBe(false);
    expect(p.canCreateIdea(projectResource)).toBe(true);
    expect(p.canCreateMetric(projectsResource)).toBe(true);
    expect(p.canCreateNamespace()).toBe(false);
    expect(p.canCreatePresentation()).toBe(true);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(true);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canCreateSavedGroup()).toBe(false);
    expect(p.canCreateSegment()).toBe(true);
    expect(p.canCreateVisualChange(projectResource)).toBe(true);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(false);
    expect(p.canDeleteAttribute(projectsResource)).toBe(false);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(true);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(true);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(true);
    expect(p.canDeleteFactTable(projectsResource)).toBe(true);
    expect(p.canDeleteFeature(projectResource)).toBe(false);
    expect(p.canDeleteIdea(projectResource)).toBe(true);
    expect(p.canDeleteMetric(projectsResource)).toBe(true);
    expect(p.canDeleteNamespace()).toBe(false);
    expect(p.canDeletePresentation()).toBe(true);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(true);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canDeleteSavedGroup()).toBe(false);
    expect(p.canDeleteSegment()).toBe(true);
    expect(p.canDeleteTag()).toBe(true);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(false);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(false);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(false);
    expect(p.canRunExperiment(projectResource, envs)).toBe(false);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunFactQueries(projectsResource)).toBe(true);
    expect(p.canRunHealthQueries(projectsResource)).toBe(true);
    expect(p.canRunMetricQueries(projectsResource)).toBe(true);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(true);
    expect(p.canRunTestQueries(projectsResource)).toBe(true);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(false);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(false);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(true);
    expect(p.canUpdateDimension()).toBe(true);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(true);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(false);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(true);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateNamespace()).toBe(false);
    expect(p.canUpdatePresentation()).toBe(true);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(true);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(false);
    expect(p.canUpdateSavedGroup()).toBe(false);
    expect(p.canUpdateSegment()).toBe(true);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(true);
    expect(p.canViewAttributeModal()).toBe(false);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(true);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(true);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(true);
    expect(p.canViewFeatureModal()).toBe(false);
    expect(p.canViewIdeaModal()).toBe(true);
    expect(p.canViewReportModal()).toBe(true);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(true);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(true);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(false);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(false);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(false);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(false);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(false);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(false);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for experimenter", () => {
    const p = getPermissions("experimenter");
    expect(p.canAddComment(projects)).toBe(true);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(false);
    expect(p.canCreateAndUpdateTag()).toBe(true);
    expect(p.canCreateApiKey()).toBe(false);
    expect(p.canCreateArchetype()).toBe(true);
    expect(p.canCreateAttribute(projectsResource)).toBe(true);
    expect(p.canCreateDataSource(projectsResource)).toBe(false);
    expect(p.canCreateDimension()).toBe(true);
    expect(p.canCreateEventWebhook()).toBe(false);
    expect(p.canCreateExperiment(projectResource)).toBe(true);
    expect(p.canCreateFactMetric(projectsResource)).toBe(true);
    expect(p.canCreateFactTable(projectsResource)).toBe(true);
    expect(p.canCreateFeature(projectResource)).toBe(true);
    expect(p.canCreateIdea(projectResource)).toBe(true);
    expect(p.canCreateMetric(projectsResource)).toBe(true);
    expect(p.canCreateNamespace()).toBe(true);
    expect(p.canCreatePresentation()).toBe(true);
    expect(p.canCreateProjects()).toBe(false);
    expect(p.canCreateReport(projectResource)).toBe(true);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canCreateSavedGroup()).toBe(true);
    expect(p.canCreateSegment()).toBe(true);
    expect(p.canCreateVisualChange(projectResource)).toBe(true);
    expect(p.canDeleteApiKey()).toBe(false);
    expect(p.canDeleteArchetype()).toBe(true);
    expect(p.canDeleteAttribute(projectsResource)).toBe(true);
    expect(p.canDeleteDataSource(projectsResource)).toBe(false);
    expect(p.canDeleteDimension()).toBe(true);
    expect(p.canDeleteEventWebhook()).toBe(false);
    expect(p.canDeleteExperiment(projectResource)).toBe(true);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(true);
    expect(p.canDeleteFactTable(projectsResource)).toBe(true);
    expect(p.canDeleteFeature(projectResource)).toBe(true);
    expect(p.canDeleteIdea(projectResource)).toBe(true);
    expect(p.canDeleteMetric(projectsResource)).toBe(true);
    expect(p.canDeleteNamespace()).toBe(true);
    expect(p.canDeletePresentation()).toBe(true);
    expect(p.canDeleteProject(project)).toBe(false);
    expect(p.canDeleteReport(projectResource)).toBe(true);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canDeleteSavedGroup()).toBe(true);
    expect(p.canDeleteSegment()).toBe(true);
    expect(p.canDeleteTag()).toBe(true);
    expect(p.canManageBilling()).toBe(false);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(true);
    expect(p.canManageIntegrations()).toBe(false);
    expect(p.canManageNorthStarMetric()).toBe(false);
    expect(p.canManageOrgSettings()).toBe(false);
    expect(p.canManageTeam()).toBe(false);
    expect(p.canPublishFeature(projectResource, envs)).toBe(true);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(true);
    expect(p.canRunExperiment(projectResource, envs)).toBe(true);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunFactQueries(projectsResource)).toBe(true);
    expect(p.canRunHealthQueries(projectsResource)).toBe(true);
    expect(p.canRunMetricQueries(projectsResource)).toBe(true);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(true);
    expect(p.canRunTestQueries(projectsResource)).toBe(true);
    expect(p.canSuperDeleteReport()).toBe(false);
    expect(p.canUpdateArchetype()).toBe(true);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(true);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(false);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(true);
    expect(p.canUpdateDimension()).toBe(true);
    expect(p.canUpdateEventWebhook()).toBe(false);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(true);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(true);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(true);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateNamespace()).toBe(true);
    expect(p.canUpdatePresentation()).toBe(true);
    expect(p.canUpdateProject(project)).toBe(false);
    expect(p.canUpdateReport(projectResource)).toBe(true);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canUpdateSavedGroup()).toBe(true);
    expect(p.canUpdateSegment()).toBe(true);
    expect(p.canUpdateSomeProjects()).toBe(false);
    expect(p.canUpdateVisualChange(projectResource)).toBe(true);
    expect(p.canViewAttributeModal()).toBe(true);
    expect(p.canViewCreateDataSourceModal()).toBe(false);
    expect(p.canViewCreateFactTableModal()).toBe(true);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(true);
    expect(p.canViewEventWebhook()).toBe(false);
    expect(p.canViewAuditLogs()).toBe(false);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(false);
    expect(p.canViewExperimentModal()).toBe(true);
    expect(p.canViewFeatureModal()).toBe(true);
    expect(p.canViewIdeaModal()).toBe(true);
    expect(p.canViewReportModal()).toBe(true);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(true);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(true);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(true);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(true);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(true);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(true);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(true);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(true);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(false);
  });

  it("has correct permissions for admin", () => {
    const p = getPermissions("admin");
    expect(p.canAddComment(projects)).toBe(true);
    expect(p.canBypassApprovalChecks(projectResource)).toBe(true);
    expect(p.canCreateAndUpdateTag()).toBe(true);
    expect(p.canCreateApiKey()).toBe(true);
    expect(p.canCreateArchetype()).toBe(true);
    expect(p.canCreateAttribute(projectsResource)).toBe(true);
    expect(p.canCreateDataSource(projectsResource)).toBe(true);
    expect(p.canCreateDimension()).toBe(true);
    expect(p.canCreateEventWebhook()).toBe(true);
    expect(p.canCreateExperiment(projectResource)).toBe(true);
    expect(p.canCreateFactMetric(projectsResource)).toBe(true);
    expect(p.canCreateFactTable(projectsResource)).toBe(true);
    expect(p.canCreateFeature(projectResource)).toBe(true);
    expect(p.canCreateIdea(projectResource)).toBe(true);
    expect(p.canCreateMetric(projectsResource)).toBe(true);
    expect(p.canCreateNamespace()).toBe(true);
    expect(p.canCreatePresentation()).toBe(true);
    expect(p.canCreateProjects()).toBe(true);
    expect(p.canCreateReport(projectResource)).toBe(true);
    expect(p.canCreateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canCreateSavedGroup()).toBe(true);
    expect(p.canCreateSegment()).toBe(true);
    expect(p.canCreateVisualChange(projectResource)).toBe(true);
    expect(p.canDeleteApiKey()).toBe(true);
    expect(p.canDeleteArchetype()).toBe(true);
    expect(p.canDeleteAttribute(projectsResource)).toBe(true);
    expect(p.canDeleteDataSource(projectsResource)).toBe(true);
    expect(p.canDeleteDimension()).toBe(true);
    expect(p.canDeleteEventWebhook()).toBe(true);
    expect(p.canDeleteExperiment(projectResource)).toBe(true);
    expect(p.canDeleteFactMetric(projectsResource)).toBe(true);
    expect(p.canDeleteFactTable(projectsResource)).toBe(true);
    expect(p.canDeleteFeature(projectResource)).toBe(true);
    expect(p.canDeleteIdea(projectResource)).toBe(true);
    expect(p.canDeleteMetric(projectsResource)).toBe(true);
    expect(p.canDeleteNamespace()).toBe(true);
    expect(p.canDeletePresentation()).toBe(true);
    expect(p.canDeleteProject(project)).toBe(true);
    expect(p.canDeleteReport(projectResource)).toBe(true);
    expect(p.canDeleteSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canDeleteSavedGroup()).toBe(true);
    expect(p.canDeleteSegment()).toBe(true);
    expect(p.canDeleteTag()).toBe(true);
    expect(p.canManageBilling()).toBe(true);
    expect(p.canManageFeatureDrafts(projectResource)).toBe(true);
    expect(p.canManageIntegrations()).toBe(true);
    expect(p.canManageNorthStarMetric()).toBe(true);
    expect(p.canManageOrgSettings()).toBe(true);
    expect(p.canManageTeam()).toBe(true);
    expect(p.canPublishFeature(projectResource, envs)).toBe(true);
    expect(p.canReviewFeatureDrafts(projectResource)).toBe(true);
    expect(p.canRunExperiment(projectResource, envs)).toBe(true);
    expect(p.canRunExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunFactQueries(projectsResource)).toBe(true);
    expect(p.canRunHealthQueries(projectsResource)).toBe(true);
    expect(p.canRunMetricQueries(projectsResource)).toBe(true);
    expect(p.canRunPastExperimentQueries(projectsResource)).toBe(true);
    expect(p.canRunSchemaQueries(projectsResource)).toBe(true);
    expect(p.canRunTestQueries(projectsResource)).toBe(true);
    expect(p.canSuperDeleteReport()).toBe(true);
    expect(p.canUpdateArchetype()).toBe(true);
    expect(p.canUpdateAttribute(projectsResource, updates)).toBe(true);
    expect(p.canUpdateDataSourceParams(projectsResource)).toBe(true);
    expect(p.canUpdateDataSourceSettings(projectsResource)).toBe(true);
    expect(p.canUpdateDimension()).toBe(true);
    expect(p.canUpdateEventWebhook()).toBe(true);
    expect(p.canUpdateExperiment(projectResource, updates)).toBe(true);
    expect(p.canUpdateFactMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFactTable(projectsResource, updates)).toBe(true);
    expect(p.canUpdateFeature(projectResource, updates)).toBe(true);
    expect(p.canUpdateIdea(projectResource, updates)).toBe(true);
    expect(p.canUpdateMetric(projectsResource, updates)).toBe(true);
    expect(p.canUpdateNamespace()).toBe(true);
    expect(p.canUpdatePresentation()).toBe(true);
    expect(p.canUpdateProject(project)).toBe(true);
    expect(p.canUpdateReport(projectResource)).toBe(true);
    expect(p.canUpdateSDKWebhook(sdkConnection)).toBe(true);
    expect(p.canUpdateSavedGroup()).toBe(true);
    expect(p.canUpdateSegment()).toBe(true);
    expect(p.canUpdateSomeProjects()).toBe(true);
    expect(p.canUpdateVisualChange(projectResource)).toBe(true);
    expect(p.canViewAttributeModal()).toBe(true);
    expect(p.canViewCreateDataSourceModal()).toBe(true);
    expect(p.canViewCreateFactTableModal()).toBe(true);
    expect(p.canViewEditFactTableModal(projectsResource)).toBe(true);
    expect(p.canViewEventWebhook()).toBe(true);
    expect(p.canViewAuditLogs()).toBe(true);
    expect(p.canViewEvent(event)).toBe(true);
    expect(p.canViewEvent(secretEvent)).toBe(true);
    expect(p.canViewExperimentModal()).toBe(true);
    expect(p.canViewFeatureModal()).toBe(true);
    expect(p.canViewIdeaModal()).toBe(true);
    expect(p.canViewReportModal()).toBe(true);
    expect(p.canCreateAndUpdateFactFilter(projectsResource)).toBe(true);
    expect(p.canDeleteFactFilter(projectsResource)).toBe(true);
    expect(p.canCreateOrUpdateEnvironment(environmentsResource)).toBe(true);
    expect(p.canDeleteEnvironment(environmentsResource)).toBe(true);
    expect(p.canViewCreateSDKConnectionModal(project)).toBe(true);
    expect(p.canCreateSDKConnection(sdkConnection)).toBe(true);
    expect(p.canUpdateSDKConnection(sdkConnection, updates)).toBe(true);
    expect(p.canDeleteSDKConnection(sdkConnection)).toBe(true);
    expect(p.canReadSingleProjectResource(project)).toBe(true);
    expect(p.canReadMultiProjectResource(projects)).toBe(true);
    expect(p.canManageLegacySDKWebhooks()).toBe(true);
  });
});
