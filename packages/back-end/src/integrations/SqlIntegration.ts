import cloneDeep from "lodash/cloneDeep";
import { dateStringArrayBetweenDates, getValidDate } from "shared/dates";
import { format as formatDate, subDays } from "date-fns";
import {
  getConversionWindowHours,
  getUserIdTypes,
  isFactMetric,
  isFunnelMetric,
  isBinomialMetric,
  isRatioMetric,
  ExperimentMetricInterface,
  getMetricTemplateVariables,
} from "shared/experiments";
import { AUTOMATIC_DIMENSION_OTHER_NAME } from "shared/constants";
import { MetricInterface, MetricType } from "../../types/metric";
import {
  DataSourceSettings,
  DataSourceProperties,
  ExposureQuery,
  DataSourceType,
  SchemaFormatConfig,
  AutoMetricSchemas,
} from "../../types/datasource";
import {
  MetricValueParams,
  SourceIntegrationInterface,
  ExperimentMetricQueryParams,
  PastExperimentParams,
  PastExperimentQueryResponse,
  ExperimentMetricQueryResponse,
  MetricValueQueryResponse,
  MetricValueQueryResponseRow,
  ExperimentQueryResponses,
  Dimension,
  TestQueryResult,
  InformationSchema,
  RawInformationSchema,
  MissingDatasourceParamsError,
  ExperimentUnitsQueryParams,
  QueryResponse,
  TrackedEventData,
  TrackedEventResponseRow,
  ExperimentUnitsQueryResponse,
  ProcessedDimensions,
  ExperimentAggregateUnitsQueryResponse,
  ExperimentAggregateUnitsQueryParams,
  UserDimension,
  ExperimentDimension,
  ExternalIdCallback,
  DimensionSlicesQueryResponse,
  DimensionSlicesQueryParams,
} from "../types/Integration";
import { DimensionInterface } from "../../types/dimension";
import { IMPORT_LIMIT_DAYS } from "../util/secrets";
import { SegmentInterface } from "../../types/segment";
import {
  getBaseIdTypeAndJoins,
  compileSqlTemplate,
  format,
  FormatDialect,
  replaceCountStar,
} from "../util/sql";
import { formatInformationSchema } from "../util/informationSchemas";
import { ExperimentSnapshotSettings } from "../../types/experiment-snapshot";
import { SQLVars, TemplateVariables } from "../../types/sql";
import { FactTableMap } from "../models/FactTableModel";
import { logger } from "../util/logger";

export const MAX_ROWS_UNIT_AGGREGATE_QUERY = 3000;

export default abstract class SqlIntegration
  implements SourceIntegrationInterface {
  settings: DataSourceSettings;
  datasource!: string;
  organization!: string;
  decryptionError!: boolean;
  // eslint-disable-next-line
  params: any;
  type!: DataSourceType;
  abstract setParams(encryptedParams: string): void;
  abstract runQuery(
    sql: string,
    setExternalId?: ExternalIdCallback
  ): Promise<QueryResponse>;
  async cancelQuery(externalId: string): Promise<void> {
    logger.debug(`Cancel query: ${externalId} - not implemented`);
  }
  abstract getSensitiveParamKeys(): string[];

  constructor(encryptedParams: string, settings: DataSourceSettings) {
    try {
      this.setParams(encryptedParams);
    } catch (e) {
      this.params = {};
      this.decryptionError = true;
    }
    this.settings = {
      ...settings,
    };
  }
  getSourceProperties(): DataSourceProperties {
    return {
      queryLanguage: "sql",
      metricCaps: true,
      segments: true,
      dimensions: true,
      exposureQueries: true,
      separateExperimentResultQueries: true,
      hasSettings: true,
      userIds: true,
      experimentSegments: true,
      activationDimension: true,
      pastExperiments: true,
      supportsInformationSchema: true,
      supportsAutoGeneratedMetrics: this.isAutoGeneratingMetricsSupported(),
      supportsWritingTables: this.isWritingTablesSupported(),
    };
  }

  async testConnection(): Promise<boolean> {
    await this.runQuery("select 1");
    return true;
  }

  isAutoGeneratingMetricsSupported(): boolean {
    const supportedEventTrackers: Record<AutoMetricSchemas, true> = {
      segment: true,
      rudderstack: true,
      ga4: true,
      amplitude: true,
    };

    if (
      this.settings.schemaFormat &&
      supportedEventTrackers[this.settings.schemaFormat as AutoMetricSchemas]
    ) {
      return true;
    }
    return false;
  }

  isWritingTablesSupported(): boolean {
    return false;
  }

  requiresDatabase = true;
  requiresSchema = true;
  requiresEscapingPath = false;

  getSchema(): string {
    return "";
  }
  getFormatDialect(): FormatDialect {
    return "";
  }
  toTimestamp(date: Date) {
    return `'${date.toISOString().substr(0, 19).replace("T", " ")}'`;
  }
  addHours(col: string, hours: number) {
    if (!hours) return col;
    let unit: "hour" | "minute" = "hour";
    const sign = hours > 0 ? "+" : "-";
    hours = Math.abs(hours);

    const roundedHours = Math.round(hours);
    const roundedMinutes = Math.round(hours * 60);

    let amount = roundedHours;

    // If not within a few minutes of an even hour, go with minutes as the unit instead
    if (Math.round(roundedMinutes / 15) % 4 > 0) {
      unit = "minute";
      amount = roundedMinutes;
    }

    if (amount === 0) {
      return col;
    }

    return this.addTime(col, unit, sign, amount);
  }
  addTime(
    col: string,
    unit: "hour" | "minute",
    sign: "+" | "-",
    amount: number
  ): string {
    return `${col} ${sign} INTERVAL '${amount} ${unit}s'`;
  }
  dateTrunc(col: string) {
    return `date_trunc('day', ${col})`;
  }
  dateDiff(startCol: string, endCol: string) {
    return `datediff(day, ${startCol}, ${endCol})`;
  }
  // eslint-disable-next-line
  convertDate(fromDB: any): Date {
    return getValidDate(fromDB);
  }
  formatDate(col: string): string {
    return col;
  }
  ifElse(condition: string, ifTrue: string, ifFalse: string) {
    return `(CASE WHEN ${condition} THEN ${ifTrue} ELSE ${ifFalse} END)`;
  }
  castToString(col: string): string {
    return `cast(${col} as varchar)`;
  }
  castToDate(col: string): string {
    return `CAST(${col} AS DATE)`;
  }
  ensureFloat(col: string): string {
    return col;
  }
  castUserDateCol(column: string): string {
    return column;
  }
  formatDateTimeString(col: string): string {
    return this.castToString(col);
  }
  selectSampleRows(table: string, limit: number): string {
    return `SELECT * FROM ${table} LIMIT ${limit}`;
  }

  applyMetricOverrides(
    metric: ExperimentMetricInterface,
    settings: ExperimentSnapshotSettings
  ) {
    if (!metric) return;

    const computed = settings.metricSettings.find((s) => s.id === metric.id)
      ?.computedSettings;
    if (!computed) return;

    metric.conversionDelayHours = computed.conversionDelayHours;

    if (isFactMetric(metric)) {
      metric.conversionWindowUnit = "hours";
      metric.conversionWindowValue = computed.conversionWindowHours;
    } else {
      metric.conversionWindowHours = computed.conversionWindowHours;
    }

    metric.regressionAdjustmentEnabled = computed.regressionAdjustmentEnabled;
    metric.regressionAdjustmentDays = computed.regressionAdjustmentDays;

    // TODO: move this to the form validation when saving this settings
    if (metric.regressionAdjustmentDays < 0) {
      metric.regressionAdjustmentDays = 0;
    }
    if (metric.regressionAdjustmentDays > 100) {
      metric.regressionAdjustmentDays = 100;
    }
  }

  private getExposureQuery(
    exposureQueryId: string,
    userIdType?: "anonymous" | "user"
  ): ExposureQuery {
    if (!exposureQueryId) {
      exposureQueryId = userIdType === "user" ? "user_id" : "anonymous_id";
    }

    const queries = this.settings?.queries?.exposure || [];

    const match = queries.find((q) => q.id === exposureQueryId);

    if (!match) {
      throw new Error(
        "Unknown experiment assignment table - " + exposureQueryId
      );
    }

    return match;
  }

  getPastExperimentQuery(params: PastExperimentParams): string {
    // TODO: for past experiments, UNION all exposure queries together
    const experimentQueries = (
      this.settings.queries?.exposure || []
    ).map(({ id }) => this.getExposureQuery(id));

    return format(
      `-- Past Experiments
    WITH
      ${experimentQueries
        .map((q, i) => {
          const hasNameCol = q.hasNameCol || false;
          return `
        __exposures${i} as (
          SELECT 
            ${this.castToString(`'${q.id}'`)} as exposure_query,
            experiment_id,
            ${
              hasNameCol ? "MIN(experiment_name)" : "experiment_id"
            } as experiment_name,
            ${this.castToString("variation_id")} as variation_id,
            ${
              hasNameCol
                ? "MIN(variation_name)"
                : this.castToString("variation_id")
            } as variation_name,
            ${this.dateTrunc(this.castUserDateCol("timestamp"))} as date,
            count(distinct ${q.userIdType}) as users
          FROM
            (
              ${compileSqlTemplate(q.query, { startDate: params.from })}
            ) e${i}
          WHERE
            timestamp > ${this.toTimestamp(params.from)}
          GROUP BY
            experiment_id,
            variation_id,
            ${this.dateTrunc(this.castUserDateCol("timestamp"))}
        ),`;
        })
        .join("\n")}
      __experiments as (
        ${experimentQueries
          .map((q, i) => `SELECT * FROM __exposures${i}`)
          .join("\nUNION ALL\n")}
      ),
      __userThresholds as (
        SELECT
          exposure_query,
          experiment_id,
          MIN(experiment_name) as experiment_name,
          variation_id,
          MIN(variation_name) as variation_name,
          -- It's common for a small number of tracking events to continue coming in
          -- long after an experiment ends, so limit to days with enough traffic
          max(users)*0.05 as threshold
        FROM
          __experiments
        WHERE
          -- Skip days where a variation got 5 or fewer visitors since it's probably not real traffic
          users > 5
        GROUP BY
        exposure_query, experiment_id, variation_id
      ),
      __variations as (
        SELECT
          d.exposure_query,
          d.experiment_id,
          MIN(d.experiment_name) as experiment_name,
          d.variation_id,
          MIN(d.variation_name) as variation_name,
          MIN(d.date) as start_date,
          MAX(d.date) as end_date,
          SUM(d.users) as users
        FROM
          __experiments d
          JOIN __userThresholds u ON (
            d.exposure_query = u.exposure_query
            AND d.experiment_id = u.experiment_id
            AND d.variation_id = u.variation_id
          )
        WHERE
          d.users > u.threshold
        GROUP BY
          d.exposure_query, d.experiment_id, d.variation_id
      )
    SELECT
      *
    FROM
      __variations
    WHERE
      -- Skip experiments at start of date range since it's likely missing data
      ${this.dateDiff(
        this.castUserDateCol(this.toTimestamp(params.from)),
        "start_date"
      )} > 2
    ORDER BY
      experiment_id ASC, variation_id ASC`,
      this.getFormatDialect()
    );
  }
  async runPastExperimentQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<PastExperimentQueryResponse> {
    const { rows, statistics } = await this.runQuery(query, setExternalId);

    return {
      rows: rows.map((row) => {
        return {
          exposure_query: row.exposure_query,
          experiment_id: row.experiment_id,
          experiment_name: row.experiment_name,
          variation_id: row.variation_id ?? "",
          variation_name: row.variation_name,
          users: parseInt(row.users) || 0,
          end_date: this.convertDate(row.end_date).toISOString(),
          start_date: this.convertDate(row.start_date).toISOString(),
        };
      }),
      statistics: statistics,
    };
  }

  getMetricValueQuery(params: MetricValueParams): string {
    const { baseIdType, idJoinMap, idJoinSQL } = this.getIdentitiesCTE(
      [
        params.metric.userIdTypes || [],
        params.segment ? [params.segment.userIdType || "user_id"] : [],
      ],
      params.from,
      params.to
    );

    // Get rough date filter for metrics to improve performance
    const metricStart = this.getMetricStart(
      params.from,
      this.getMetricMinDelay([params.metric]),
      0
    );
    const metricEnd = this.getMetricEnd([params.metric], params.to);

    const aggregate = this.getAggregateMetricColumn(params.metric);

    // TODO query is broken if segment has template variables
    return format(
      `-- ${params.name} - ${params.metric.name} Metric
      WITH
        ${idJoinSQL}
        ${
          params.segment
            ? `segment as (${this.getSegmentCTE(
                params.segment,
                baseIdType,
                idJoinMap
              )}),`
            : ""
        }
        __metric as (${this.getMetricCTE({
          metric: params.metric,
          baseIdType,
          idJoinMap,
          startDate: metricStart,
          endDate: metricEnd,
          // Facts tables are not supported for this query yet
          factTableMap: new Map(),
        })})
        , __userMetric as (
          -- Add in the aggregate metric value for each user
          SELECT
            ${aggregate} as value
          FROM
            __metric m
            ${
              params.segment
                ? `JOIN segment s ON (s.${baseIdType} = m.${baseIdType}) WHERE s.date <= m.timestamp`
                : ""
            }
          GROUP BY
            m.${baseIdType}
        )
        , __overall as (
          SELECT
            COUNT(*) as count,
            COALESCE(SUM(value), 0) as main_sum,
            COALESCE(SUM(POWER(value, 2)), 0) as main_sum_squares
          from
            __userMetric
        )
        ${
          params.includeByDate
            ? `
          , __userMetricDates as (
            -- Add in the aggregate metric value for each user
            SELECT
              ${this.dateTrunc("m.timestamp")} as date,
              ${aggregate} as value
            FROM
              __metric m
              ${
                params.segment
                  ? `JOIN segment s ON (s.${baseIdType} = m.${baseIdType}) WHERE s.date <= m.timestamp`
                  : ""
              }
            GROUP BY
              ${this.dateTrunc("m.timestamp")},
              m.${baseIdType}
          )
          , __byDateOverall as (
            SELECT
              date,
              COUNT(*) as count,
              COALESCE(SUM(value), 0) as main_sum,
              COALESCE(SUM(POWER(value, 2)), 0) as main_sum_squares
            FROM
              __userMetricDates d
            GROUP BY
              date
          )`
            : ""
        }
      ${
        params.includeByDate
          ? `
        , __union as (
          SELECT 
            null as date,
            o.*
          FROM
            __overall o
          UNION ALL
          SELECT
            d.*
          FROM
            __byDateOverall d
        )
        SELECT
          *
        FROM
          __union
        ORDER BY
          date ASC
      `
          : `
        SELECT
          o.*
        FROM
          __overall o
      `
      }
      
      `,
      this.getFormatDialect()
    );
  }

  async runExperimentMetricQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<ExperimentMetricQueryResponse> {
    const { rows, statistics } = await this.runQuery(query, setExternalId);
    return {
      rows: rows.map((row) => {
        return {
          variation: row.variation ?? "",
          dimension: row.dimension || "",
          users: parseInt(row.users) || 0,
          count: parseInt(row.users) || 0,
          statistic_type: row.statistic_type ?? "",
          main_metric_type: row.main_metric_type ?? "",
          main_sum: parseFloat(row.main_sum) || 0,
          main_sum_squares: parseFloat(row.main_sum_squares) || 0,
          ...(row.denominator_metric_type && {
            denominator_metric_type: row.denominator_metric_type ?? "",
            denominator_sum: parseFloat(row.denominator_sum) || 0,
            denominator_sum_squares:
              parseFloat(row.denominator_sum_squares) || 0,
            main_denominator_sum_product:
              parseFloat(row.main_denominator_sum_product) || 0,
          }),
          ...(row.covariate_metric_type && {
            covariate_metric_type: row.covariate_metric_type ?? "",
            covariate_sum: parseFloat(row.covariate_sum) || 0,
            covariate_sum_squares: parseFloat(row.covariate_sum_squares) || 0,
            main_covariate_sum_product:
              parseFloat(row.main_covariate_sum_product) || 0,
          }),
          ...(row.main_cap_value && { main_cap_value: row.main_cap_value }),
          ...(row.denominator_cap_value && {
            denominator_cap_value: row.denominator_cap_value,
          }),
        };
      }),
      statistics: statistics,
    };
  }

  async runExperimentAggregateUnitsQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<ExperimentAggregateUnitsQueryResponse> {
    const { rows, statistics } = await this.runQuery(query, setExternalId);
    return {
      rows: rows.map((row) => {
        return {
          variation: row.variation ?? "",
          units: parseInt(row.units) || 0,
          dimension_value: row.dimension_value ?? "",
          dimension_name: row.dimension_name ?? "",
        };
      }),
      statistics: statistics,
    };
  }

  async runExperimentUnitsQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<ExperimentUnitsQueryResponse> {
    return await this.runQuery(query, setExternalId);
  }

  async runMetricValueQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<MetricValueQueryResponse> {
    const { rows, statistics } = await this.runQuery(query, setExternalId);

    return {
      rows: rows.map((row) => {
        const { date, count, main_sum, main_sum_squares } = row;

        const ret: MetricValueQueryResponseRow = {
          date: date ? this.convertDate(date).toISOString() : "",
          count: parseFloat(count) || 0,
          main_sum: parseFloat(main_sum) || 0,
          main_sum_squares: parseFloat(main_sum_squares) || 0,
        };

        return ret;
      }),
      statistics: statistics,
    };
  }

  //Test the validity of a query as cheaply as possible
  getTestValidityQuery(
    query: string,
    templateVariables?: TemplateVariables
  ): string {
    return this.getTestQuery(query, templateVariables, 1);
  }

  getTestQuery(
    query: string,
    templateVariables?: TemplateVariables,
    limit: number = 5
  ): string {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - IMPORT_LIMIT_DAYS);
    const limitedQuery = compileSqlTemplate(
      `WITH __table as (
        ${query}
      )
      ${this.selectSampleRows("__table", limit)}`,
      {
        startDate,
        templateVariables,
      }
    );
    return format(limitedQuery, this.getFormatDialect());
  }

  async runTestQuery(
    sql: string,
    timestampCols?: string[]
  ): Promise<TestQueryResult> {
    // Calculate the run time of the query
    const queryStartTime = Date.now();
    const results = await this.runQuery(sql);
    const queryEndTime = Date.now();
    const duration = queryEndTime - queryStartTime;

    if (timestampCols) {
      results.rows.forEach((row) => {
        timestampCols.forEach((col) => {
          if (row[col]) {
            row[col] = this.convertDate(row[col]);
          }
        });
      });
    }

    return { results: results.rows, duration };
  }

  private getIdentitiesCTE(
    objects: string[][],
    from: Date,
    to?: Date,
    forcedBaseIdType?: string,
    experimentId?: string
  ) {
    const { baseIdType, joinsRequired } = getBaseIdTypeAndJoins(
      objects,
      forcedBaseIdType
    );

    // Joins for when an object doesn't support the baseIdType
    const joins: string[] = [];
    const idJoinMap: Record<string, string> = {};

    // Generate table names and SQL for each of the required joins
    joinsRequired.forEach((idType, i) => {
      const table = `__identities${i}`;
      idJoinMap[idType] = table;
      joins.push(
        `${table} as (
        ${this.getIdentitiesQuery(
          this.settings,
          baseIdType,
          idType,
          from,
          to,
          experimentId
        )}
      ),`
      );
    });

    return {
      baseIdType,
      idJoinSQL: joins.join("\n"),
      idJoinMap,
    };
  }

  private getFunnelUsersCTE(
    baseIdType: string,
    metrics: ExperimentMetricInterface[],
    isRegressionAdjusted: boolean = false,
    ignoreConversionEnd: boolean = false,
    tablePrefix: string = "__denominator",
    initialTable: string = "__experiment"
  ) {
    // Note: the aliases below are needed for clickhouse
    return `
      -- one row per user
      SELECT
        initial.${baseIdType} AS ${baseIdType},
        MIN(initial.dimension) AS dimension,
        MIN(initial.variation) AS variation,
        MIN(initial.first_exposure_date) AS first_exposure_date,
        ${
          isRegressionAdjusted
            ? `
            MIN(initial.preexposure_start) AS preexposure_start,
            MIN(initial.preexposure_end) AS preexposure_end,`
            : ""
        }
        MIN(t${metrics.length - 1}.timestamp) AS timestamp
      FROM
        ${initialTable} initial
        ${metrics
          .map((m, i) => {
            const prevAlias = i ? `t${i - 1}` : "initial";
            const alias = `t${i}`;
            return `JOIN ${tablePrefix}${i} ${alias} ON (
            ${alias}.${baseIdType} = ${prevAlias}.${baseIdType}
          )`;
          })
          .join("\n")}
      WHERE
        ${metrics
          .map((m, i) => {
            const prevAlias = i ? `t${i - 1}` : "initial";
            const alias = `t${i}`;
            return this.getConversionWindowClause(
              `${prevAlias}.timestamp`,
              `${alias}.timestamp`,
              m,
              ignoreConversionEnd
            );
          })
          .join("\n AND ")}
      GROUP BY
        initial.${baseIdType}`;
  }

  private getDimensionColumn(
    baseIdType: string,
    dimension: UserDimension | ExperimentDimension | null
  ) {
    const missingDimString = "__NULL_DIMENSION";
    if (!dimension) {
      return this.castToString("'All'");
    } else if (dimension.type === "user") {
      return `COALESCE(MAX(${this.castToString(
        `__dim_unit_${dimension.dimension.id}.value`
      )}),'${missingDimString}')`;
    } else if (dimension.type === "experiment") {
      return `SUBSTRING(
        MIN(
          CONCAT(SUBSTRING(${this.formatDateTimeString("e.timestamp")}, 1, 19), 
            coalesce(${this.castToString(
              `e.dim_${dimension.id}`
            )}, ${this.castToString(`'${missingDimString}'`)})
          )
        ),
        20, 
        99999
      )`;
    }

    throw new Error("Unknown dimension type: " + (dimension as Dimension).type);
  }

  private getConversionWindowClause(
    baseCol: string,
    metricCol: string,
    metric: ExperimentMetricInterface,
    ignoreConversionEnd: boolean
  ): string {
    const conversionDelayHours = metric.conversionDelayHours ?? 0;
    const conversionWindowHours = getConversionWindowHours(metric);
    return `
      ${metricCol} >= ${this.addHours(baseCol, conversionDelayHours)}
      ${
        ignoreConversionEnd
          ? ""
          : `AND ${metricCol} <= ${this.addHours(
              baseCol,
              conversionDelayHours + conversionWindowHours
            )}`
      }`;
  }

  private getMetricMinDelay(metrics: ExperimentMetricInterface[]) {
    let runningDelay = 0;
    let minDelay = 0;
    metrics.forEach((m) => {
      if (m.conversionDelayHours) {
        const delay = runningDelay + m.conversionDelayHours;
        if (delay < minDelay) minDelay = delay;
        runningDelay = delay;
      }
    });
    return minDelay;
  }

  private getMetricStart(
    initial: Date,
    minDelay: number,
    regressionAdjustmentHours: number
  ) {
    const metricStart = new Date(initial);
    if (minDelay < 0) {
      metricStart.setHours(metricStart.getHours() + minDelay);
    }
    if (regressionAdjustmentHours > 0) {
      metricStart.setHours(metricStart.getHours() - regressionAdjustmentHours);
    }
    return metricStart;
  }

  private getMetricEnd(
    metrics: ExperimentMetricInterface[],
    initial?: Date,
    ignoreConversionEnd?: boolean
  ): Date | null {
    if (!initial) return null;
    if (ignoreConversionEnd) return initial;

    const metricEnd = new Date(initial);
    let runningHours = 0;
    let maxHours = 0;
    metrics.forEach((m) => {
      const hours =
        runningHours +
        getConversionWindowHours(m) +
        (m.conversionDelayHours || 0);
      if (hours > maxHours) maxHours = hours;
      runningHours = hours;
    });

    if (maxHours > 0) {
      metricEnd.setHours(metricEnd.getHours() + maxHours);
    }

    return metricEnd;
  }

  private getMaxHoursToConvert(
    funnelMetric: boolean,
    metricAndDenominatorMetrics: ExperimentMetricInterface[],
    activationMetric: ExperimentMetricInterface | null
  ): number {
    let neededHoursForConversion = 0;
    metricAndDenominatorMetrics.forEach((m) => {
      const metricHours =
        (m.conversionDelayHours || 0) + getConversionWindowHours(m);
      if (funnelMetric) {
        // funnel metric windows cab cascade, so sum each metric hours to get max
        neededHoursForConversion += metricHours;
      } else if (metricHours > neededHoursForConversion) {
        neededHoursForConversion = metricHours;
      }
    });
    // activation metrics windows always cascade
    if (activationMetric) {
      neededHoursForConversion +=
        (activationMetric.conversionDelayHours || 0) +
        getConversionWindowHours(activationMetric);
    }
    return neededHoursForConversion;
  }

  private getStatisticType(
    isRatio: boolean,
    isRegressionAdjusted: boolean
  ): "mean" | "ratio" | "mean_ra" {
    if (isRatio) {
      return "ratio";
    }
    if (isRegressionAdjusted) {
      return "mean_ra";
    }
    return "mean";
  }

  processDimensions(
    dimensions: Dimension[],
    settings: ExperimentSnapshotSettings,
    activationMetric: ExperimentMetricInterface | null
  ): ProcessedDimensions {
    const processedDimensions: ProcessedDimensions = {
      unitDimensions: [],
      experimentDimensions: [],
      activationDimension: null,
    };
    dimensions.forEach((dimension) => {
      if (dimension?.type === "activation") {
        if (activationMetric) {
          processedDimensions.activationDimension = { type: "activation" };
        }
      } else if (dimension?.type === "user") {
        // Replace any placeholders in the user defined dimension SQL
        const clonedDimension = cloneDeep<UserDimension>(dimension);
        clonedDimension.dimension.sql = compileSqlTemplate(
          dimension.dimension.sql,
          {
            startDate: settings.startDate,
            endDate: settings.endDate,
            experimentId: settings.experimentId,
          }
        );
        processedDimensions.unitDimensions.push(clonedDimension);
      } else if (dimension?.type === "experiment") {
        processedDimensions.experimentDimensions.push(dimension);
      }
    });
    return processedDimensions;
  }

  createUnitsTableOptions() {
    return "";
  }

  getExperimentUnitsTableQuery(params: ExperimentUnitsQueryParams): string {
    return format(
      `
    CREATE OR REPLACE TABLE ${params.unitsTableFullName}
    ${this.createUnitsTableOptions()}
    AS (
      WITH
        ${this.getExperimentUnitsQuery(params)}
      SELECT * FROM __experimentUnits
    );
    `,
      this.getFormatDialect()
    );
  }

  processActivationMetric(
    activationMetricDoc: null | ExperimentMetricInterface,
    settings: ExperimentSnapshotSettings
  ): null | ExperimentMetricInterface {
    let activationMetric: null | ExperimentMetricInterface = null;
    if (activationMetricDoc) {
      activationMetric = cloneDeep<ExperimentMetricInterface>(
        activationMetricDoc
      );
      this.applyMetricOverrides(activationMetric, settings);
    }
    return activationMetric;
  }

  getDimensionInStatement(dimension: string, values: string[]): string {
    return this.ifElse(
      `${this.castToString(dimension)} IN ('${values.join("','")}')`,
      this.castToString(dimension),
      this.castToString(`'${AUTOMATIC_DIMENSION_OTHER_NAME}'`)
    );
  }

  getExperimentUnitsQuery(params: ExperimentUnitsQueryParams): string {
    const {
      settings,
      segment,
      activationMetric: activationMetricDoc,
      factTableMap,
    } = params;

    const activationMetric = this.processActivationMetric(
      activationMetricDoc,
      settings
    );

    const { experimentDimensions, unitDimensions } = this.processDimensions(
      params.dimensions,
      settings,
      activationMetric
    );

    const exposureQuery = this.getExposureQuery(settings.exposureQueryId || "");

    // Get any required identity join queries
    const { baseIdType, idJoinMap, idJoinSQL } = this.getIdentitiesCTE(
      [
        [exposureQuery.userIdType],
        activationMetric ? getUserIdTypes(activationMetric, factTableMap) : [],
        ...unitDimensions.map((d) => [d.dimension.userIdType || "user_id"]),
        segment ? [segment.userIdType || "user_id"] : [],
      ],
      settings.startDate,
      settings.endDate,
      exposureQuery.userIdType,
      settings.experimentId
    );

    // Get date range for experiment
    const startDate: Date = settings.startDate;
    const endDate: Date = this.getExperimentEndDate(settings, 0);

    const timestampColumn = "e.timestamp";
    // BQ datetime cast for SELECT statements (do not use for where)
    const timestampDateTimeColumn = this.castUserDateCol(timestampColumn);
    let ignoreConversionEnd =
      settings.attributionModel === "experimentDuration";

    // If the fact metric doesn't have a conversion window, always treat like Experiment Duration
    if (
      activationMetric &&
      isFactMetric(activationMetric) &&
      !activationMetric.hasConversionWindow
    ) {
      ignoreConversionEnd = true;
    }
    return `
    ${params.includeIdJoins ? idJoinSQL : ""}
    __rawExperiment AS (
      ${compileSqlTemplate(exposureQuery.query, {
        startDate: settings.startDate,
        endDate: settings.endDate,
        experimentId: settings.experimentId,
      })}
    ),
    __experimentExposures AS (
      -- Viewed Experiment
      SELECT
        e.${baseIdType} as ${baseIdType}
        , ${this.castToString("e.variation_id")} as variation
        , ${timestampDateTimeColumn} as timestamp
        ${experimentDimensions
          .map((d) => {
            if (d.specifiedSlices?.length) {
              return `, ${this.getDimensionInStatement(
                d.id,
                d.specifiedSlices
              )} AS dim_${d.id}`;
            }
            return `, e.${d.id} AS dim_${d.id}`;
          })
          .join("\n")}
      FROM
          __rawExperiment e
      WHERE
          e.experiment_id = '${settings.experimentId}'
          AND ${timestampColumn} >= ${this.toTimestamp(startDate)}
          ${
            endDate
              ? `AND ${timestampColumn} <= ${this.toTimestamp(endDate)}`
              : ""
          }
          ${settings.queryFilter ? `AND (\n${settings.queryFilter}\n)` : ""}
    )
    ${
      activationMetric
        ? `, __activationMetric as (${this.getMetricCTE({
            metric: activationMetric,
            baseIdType,
            idJoinMap,
            startDate: this.getMetricStart(
              settings.startDate,
              activationMetric.conversionDelayHours || 0,
              0
            ),
            endDate: this.getMetricEnd(
              [activationMetric],
              settings.endDate,
              ignoreConversionEnd
            ),
            experimentId: settings.experimentId,
            factTableMap,
          })})
        `
        : ""
    }
    ${
      segment
        ? `, __segment as (${this.getSegmentCTE(
            segment,
            baseIdType,
            idJoinMap,
            {
              startDate: settings.startDate,
              endDate: settings.endDate,
              experimentId: settings.experimentId,
            }
          )})`
        : ""
    }
    ${unitDimensions
      .map(
        (d) =>
          `, __dim_unit_${d.dimension.id} as (${this.getDimensionCTE(
            d.dimension,
            baseIdType,
            idJoinMap
          )})`
      )
      .join("\n")}
    , __experimentUnits AS (
      -- One row per user
      SELECT
        e.${baseIdType} AS ${baseIdType}
        , ${this.ifElse(
          "count(distinct e.variation) > 1",
          "'__multiple__'",
          "max(e.variation)"
        )} AS variation
        , MIN(${timestampColumn}) AS first_exposure_timestamp
        ${unitDimensions
          .map(
            (d) => `
          , ${this.getDimensionColumn(baseIdType, d)} AS dim_unit_${
              d.dimension.id
            }`
          )
          .join("\n")}
        ${experimentDimensions
          .map(
            (d) => `
          , ${this.getDimensionColumn(baseIdType, d)} AS dim_exp_${d.id}`
          )
          .join("\n")}
        ${
          activationMetric
            ? `, MIN(${this.ifElse(
                this.getConversionWindowClause(
                  "e.timestamp",
                  "a.timestamp",
                  activationMetric,
                  ignoreConversionEnd
                ),
                "a.timestamp",
                "NULL"
              )}) AS first_activation_timestamp
            `
            : ""
        }
      FROM
        __experimentExposures e
        ${
          segment
            ? `JOIN __segment s ON (s.${baseIdType} = e.${baseIdType})`
            : ""
        }
        ${unitDimensions
          .map(
            (d) => `
            LEFT JOIN __dim_unit_${d.dimension.id} __dim_unit_${d.dimension.id} ON (
              __dim_unit_${d.dimension.id}.${baseIdType} = e.${baseIdType}
            )
          `
          )
          .join("\n")}
        ${
          activationMetric
            ? `LEFT JOIN __activationMetric a ON (a.${baseIdType} = e.${baseIdType})`
            : ""
        }
      ${segment ? `WHERE s.date <= e.timestamp` : ""}
      GROUP BY
        e.${baseIdType}
    )`;
  }

  getExperimentAggregateUnitsQuery(
    params: ExperimentAggregateUnitsQueryParams
  ): string {
    const {
      activationMetric,
      segment,
      settings,
      factTableMap,
      useUnitsTable,
    } = params;

    // unitDimensions not supported yet
    const { experimentDimensions } = this.processDimensions(
      params.dimensions,
      settings,
      activationMetric
    );

    const exposureQuery = this.getExposureQuery(settings.exposureQueryId || "");

    // Get any required identity join queries
    const { baseIdType, idJoinSQL } = this.getIdentitiesCTE(
      // add idTypes usually handled in units query here in the case where
      // we don't have a separate table for the units query
      // then for this query we just need the activation metric for activation
      // dimensions
      [
        [exposureQuery.userIdType],
        !useUnitsTable && activationMetric
          ? getUserIdTypes(activationMetric, factTableMap)
          : [],
        !useUnitsTable && segment ? [segment.userIdType || "user_id"] : [],
      ],
      settings.startDate,
      settings.endDate,
      exposureQuery.userIdType,
      settings.experimentId
    );

    return format(
      `-- Traffic Query for Health Tab
    WITH
      ${idJoinSQL}
      ${
        !useUnitsTable
          ? `${this.getExperimentUnitsQuery({
              ...params,
              includeIdJoins: false,
            })},`
          : ""
      }
      __distinctUnits AS (
        SELECT
          ${baseIdType}
          , variation
          , ${this.formatDate(
            this.dateTrunc("first_exposure_timestamp")
          )} AS dim_exposure_date
          ${experimentDimensions.map((d) => `, dim_exp_${d.id}`).join("\n")}
          ${
            activationMetric
              ? `, ${this.ifElse(
                  `first_activation_timestamp IS NULL`,
                  "'Not Activated'",
                  "'Activated'"
                )} AS dim_activated`
              : ""
          }
        FROM ${
          useUnitsTable ? `${params.unitsTableFullName}` : "__experimentUnits"
        }
      )
      -- One row per variation per dimension slice
      ${[
        "dim_exposure_date",
        ...experimentDimensions.map((d) => `dim_exp_${d.id}`),
        ...(activationMetric ? ["dim_activated"] : []),
      ]
        .map((d) =>
          this.getUnitCountCTE(
            d,
            activationMetric && d !== "dim_activated"
              ? "WHERE dim_activated = 'Activated'"
              : ""
          )
        )
        .join("\nUNION ALL\n")}
      LIMIT ${MAX_ROWS_UNIT_AGGREGATE_QUERY}
    `,
      this.getFormatDialect()
    );
  }

  getUnitCountCTE(dimensionColumn: string, whereClause?: string): string {
    return ` -- ${dimensionColumn}
    (SELECT
      variation AS variation
      , ${dimensionColumn} AS dimension_value
      , MAX(${this.castToString(`'${dimensionColumn}'`)}) AS dimension_name
      , COUNT(*) AS units
    FROM
      __distinctUnits
    ${whereClause ?? ""}
    GROUP BY
      variation
      , ${dimensionColumn})`;
  }

  getDimensionSlicesQuery(params: DimensionSlicesQueryParams): string {
    const exposureQuery = this.getExposureQuery(params.exposureQueryId || "");

    const { baseIdType } = getBaseIdTypeAndJoins([[exposureQuery.userIdType]]);

    const startDate = subDays(new Date(), params.lookbackDays);
    const timestampColumn = "e.timestamp";
    return format(
      `-- Suggest Dimension Slices
    WITH
      __rawExperiment AS (
        ${compileSqlTemplate(exposureQuery.query, {
          startDate: startDate,
        })}
      ),
      __experimentExposures AS (
        -- Viewed Experiment
        SELECT
          e.${baseIdType} as ${baseIdType}
          , e.timestamp
          ${params.dimensions
            .map((d) => `, e.${d.id} AS dim_${d.id}`)
            .join("\n")}
        FROM
          __rawExperiment e
        WHERE
          ${timestampColumn} >= ${this.toTimestamp(startDate)}
      ),
      __distinctUnits AS (
        SELECT
          ${baseIdType}
          ${params.dimensions
            .map(
              (d) => `
            , ${this.getDimensionColumn(baseIdType, d)} AS dim_exp_${d.id}`
            )
            .join("\n")}
          , 1 AS variation
        FROM
          __experimentExposures e
        GROUP BY
          e.${baseIdType}
      ),
      -- One row per dimension slice
      dim_values AS (
        (SELECT
          1 AS variation
          , ${this.castToString("'All'")} AS dimension_value
          , ${this.castToString("'All'")} AS dimension_name
          , COUNT(*) AS units
        FROM
          __distinctUnits
          ) UNION ALL
        ${params.dimensions
          .map((d) => this.getUnitCountCTE(`dim_exp_${d.id}`))
          .join("\nUNION ALL\n")}
      ),
      total_n AS (
        SELECT
          SUM(units) AS N
        FROM dim_values
        WHERE dimension_name = 'All'
      ),
      dim_values_sorted AS (
        SELECT
          dimension_name
          , dimension_value
          , units
          , ROW_NUMBER() OVER (PARTITION BY dimension_name ORDER BY units DESC) as rn
        FROM
          dim_values
        WHERE
          dimension_name != 'All'
      )
      SELECT
        dim_values_sorted.dimension_name AS dimension_name,
        dim_values_sorted.dimension_value AS dimension_value,
        dim_values_sorted.units AS units,
        n.N AS total_units
      FROM
        dim_values_sorted
      CROSS JOIN total_n n
      WHERE 
        rn <= 20
    `,
      this.getFormatDialect()
    );
  }

  async runDimensionSlicesQuery(
    query: string,
    setExternalId: ExternalIdCallback
  ): Promise<DimensionSlicesQueryResponse> {
    const { rows, statistics } = await this.runQuery(query, setExternalId);
    return {
      rows: rows.map((row) => {
        return {
          dimension_value: row.dimension_value ?? "",
          dimension_name: row.dimension_name ?? "",
          units: parseInt(row.units) || 0,
          total_units: parseInt(row.total_units) || 0,
        };
      }),
      statistics: statistics,
    };
  }

  getExperimentMetricQuery(params: ExperimentMetricQueryParams): string {
    const {
      metric: metricDoc,
      denominatorMetrics: denominatorMetricsDocs,
      activationMetric: activationMetricDoc,
      settings,
      segment,
    } = params;

    const factTableMap = params.factTableMap;

    // clone the metrics before we mutate them
    const metric = cloneDeep<ExperimentMetricInterface>(metricDoc);
    let denominatorMetrics = cloneDeep<ExperimentMetricInterface[]>(
      denominatorMetricsDocs
    );
    const activationMetric = this.processActivationMetric(
      activationMetricDoc,
      settings
    );

    // Fact metrics are self-contained, so they don't need to reference other metrics for the denominator
    if (isFactMetric(metric)) {
      denominatorMetrics = [];
      if (isRatioMetric(metric)) {
        denominatorMetrics.push(metric);
      }
    }

    this.applyMetricOverrides(metric, settings);
    denominatorMetrics.forEach((m) => this.applyMetricOverrides(m, settings));

    // Replace any placeholders in the user defined dimension SQL
    const { unitDimensions } = this.processDimensions(
      params.dimensions,
      settings,
      activationMetric
    );

    const exposureQuery = this.getExposureQuery(settings.exposureQueryId || "");

    const denominator = denominatorMetrics[denominatorMetrics.length - 1];
    // If the denominator is a binomial, it's just acting as a filter
    // e.g. "Purchase/Signup" is filtering to users who signed up and then counting purchases
    // When the denominator is a count, it's a real ratio, dividing two quantities
    // e.g. "Pages/Session" is dividing number of page views by number of sessions
    const ratioMetric = isRatioMetric(metric, denominator);
    const funnelMetric = isFunnelMetric(metric, denominator);

    const cumulativeDate = false; // TODO enable flag for time series

    // redundant checks to make sure configuration makes sense and we only build expensive queries for the cases
    // where RA is actually possible
    const isRegressionAdjusted =
      settings.regressionAdjustmentEnabled &&
      (metric.regressionAdjustmentDays ?? 0) > 0 &&
      !!metric.regressionAdjustmentEnabled &&
      !ratioMetric;

    const regressionAdjustmentHours = isRegressionAdjusted
      ? (metric.regressionAdjustmentDays ?? 0) * 24
      : 0;

    let ignoreConversionEnd =
      settings.attributionModel === "experimentDuration";

    // If a fact metric has disabled conversion windows, always use "Experiment Duration"
    if (isFactMetric(metric) && !metric.hasConversionWindow) {
      ignoreConversionEnd = true;
    }

    // Get capping settings and final coalesce statement
    const isPercentileCapped =
      metric.capping === "percentile" && metric.capValue && metric.capValue < 1;
    const denominatorIsPercentileCapped =
      denominator &&
      denominator.capping === "percentile" &&
      denominator.capValue &&
      denominator.capValue < 1;
    const capCoalesceMetric = this.capCoalesceValue("m.value", metric, "cap");
    const capCoalesceDenominator = this.capCoalesceValue(
      "d.value",
      denominator,
      "capd"
    );
    const capCoalesceCovariate = this.capCoalesceValue(
      "c.value",
      metric,
      "cap"
    );

    // Get rough date filter for metrics to improve performance
    const orderedMetrics = (activationMetric ? [activationMetric] : [])
      .concat(denominatorMetrics)
      .concat([metric]);
    const minMetricDelay = this.getMetricMinDelay(orderedMetrics);
    const metricStart = this.getMetricStart(
      settings.startDate,
      minMetricDelay,
      regressionAdjustmentHours
    );
    const metricEnd = this.getMetricEnd(
      orderedMetrics,
      settings.endDate,
      ignoreConversionEnd
    );

    // Get any required identity join queries
    const idTypeObjects = [
      [exposureQuery.userIdType],
      getUserIdTypes(metric, factTableMap),
      ...denominatorMetrics.map((m) => getUserIdTypes(m, factTableMap, true)),
    ];
    // add idTypes usually handled in units query here in the case where
    // we don't have a separate table for the units query
    if (!params.useUnitsTable) {
      idTypeObjects.push(
        ...unitDimensions.map((d) => [d.dimension.userIdType || "user_id"]),
        segment ? [segment.userIdType || "user_id"] : [],
        activationMetric ? getUserIdTypes(activationMetric, factTableMap) : []
      );
    }
    const { baseIdType, idJoinMap, idJoinSQL } = this.getIdentitiesCTE(
      idTypeObjects,
      settings.startDate,
      settings.endDate,
      exposureQuery.userIdType,
      settings.experimentId
    );

    // Get date range for experiment and analysis
    const startDate: Date = settings.startDate;
    const endDate: Date = this.getExperimentEndDate(
      settings,
      this.getMaxHoursToConvert(
        funnelMetric,
        [metric].concat(denominatorMetrics),
        activationMetric
      )
    );

    if (params.dimensions.length > 1) {
      throw new Error(
        "Multiple dimensions not supported in metric analysis yet. Please contact GrowthBook."
      );
    }
    const dimension = params.dimensions[0];
    let dimensionCol = this.castToString("'All'");
    if (dimension?.type === "experiment") {
      dimensionCol = `dim_exp_${dimension.id}`;
    } else if (dimension?.type === "user") {
      dimensionCol = `dim_unit_${dimension.dimension.id}`;
    } else if (dimension?.type === "date") {
      dimensionCol = `${this.formatDate(
        this.dateTrunc("first_exposure_timestamp")
      )}`;
    } else if (dimension?.type === "activation") {
      dimensionCol = this.ifElse(
        `first_activation_timestamp IS NULL`,
        "'Not Activated'",
        "'Activated'"
      );
    }

    const timestampColumn =
      activationMetric && dimension?.type !== "activation"
        ? "first_activation_timestamp"
        : "first_exposure_timestamp";

    const distinctUsersWhere: string[] = [];
    if (activationMetric && dimension?.type !== "activation") {
      distinctUsersWhere.push("first_activation_timestamp IS NOT NULL");
    }
    if (settings.skipPartialData) {
      distinctUsersWhere.push(
        `${timestampColumn} <= ${this.toTimestamp(endDate)}`
      );
    }

    return format(
      `-- ${metric.name} (${
        isFactMetric(metric) ? metric.metricType : metric.type
      })
    WITH
      ${idJoinSQL}
      ${
        !params.useUnitsTable
          ? `${this.getExperimentUnitsQuery({
              ...params,
              includeIdJoins: false,
            })},`
          : ""
      }
      __distinctUsers AS (
        SELECT
          ${baseIdType},
          ${dimensionCol} AS dimension,
          variation,
          ${timestampColumn} AS timestamp,
          ${this.dateTrunc("first_exposure_timestamp")} AS first_exposure_date
          ${
            isRegressionAdjusted
              ? `, ${this.addHours(
                  "first_exposure_timestamp",
                  minMetricDelay
                )} AS preexposure_end
                , ${this.addHours(
                  "first_exposure_timestamp",
                  minMetricDelay - regressionAdjustmentHours
                )} AS preexposure_start`
              : ""
          }
        FROM ${
          params.useUnitsTable
            ? `${params.unitsTableFullName}`
            : "__experimentUnits"
        }
        ${
          distinctUsersWhere.length
            ? `WHERE ${distinctUsersWhere.join(" AND ")}`
            : ""
        }
      )
      , __metric as (${this.getMetricCTE({
        metric,
        baseIdType,
        idJoinMap,
        startDate: metricStart,
        endDate: metricEnd,
        experimentId: settings.experimentId,
        factTableMap,
      })})
      ${denominatorMetrics
        .map((m, i) => {
          return `, __denominator${i} as (${this.getMetricCTE({
            metric: m,
            baseIdType,
            idJoinMap,
            startDate: metricStart,
            endDate: metricEnd,
            experimentId: settings.experimentId,
            factTableMap,
            useDenominator: true,
          })})`;
        })
        .join("\n")}
      ${
        funnelMetric
          ? `, __denominatorUsers as (${this.getFunnelUsersCTE(
              baseIdType,
              denominatorMetrics,
              isRegressionAdjusted,
              ignoreConversionEnd,
              "__denominator",
              "__distinctUsers"
            )})`
          : ""
      }
      ${
        cumulativeDate
          ? `, __dateRange AS (
        ${this.getDateTable(
          dateStringArrayBetweenDates(startDate, endDate || new Date())
        )}
      )`
          : ""
      }
      , __userMetricJoin as (
        SELECT
          d.variation AS variation,
          d.dimension AS dimension,
          ${cumulativeDate ? `dr.day AS day,` : ""}
          d.${baseIdType} AS ${baseIdType},
          ${this.addCaseWhenTimeFilter(
            "m.value",
            metric,
            ignoreConversionEnd,
            cumulativeDate
          )} as value
        FROM
          ${funnelMetric ? "__denominatorUsers" : "__distinctUsers"} d
        LEFT JOIN __metric m ON (
          m.${baseIdType} = d.${baseIdType}
        )
        ${
          cumulativeDate
            ? `
            CROSS JOIN __dateRange dr
            WHERE d.first_exposure_date <= dr.day
          `
            : ""
        }
      )
      , __userMetricAgg as (
        -- Add in the aggregate metric value for each user
        SELECT
          variation,
          dimension,
          ${cumulativeDate ? "day," : ""}
          ${baseIdType},
          ${this.getAggregateMetricColumn(metric)} as value
        FROM
          __userMetricJoin
        GROUP BY
          variation,
          dimension,
          ${cumulativeDate ? "day," : ""}
          ${baseIdType}
      )
      ${
        isPercentileCapped
          ? `
        , __capValue AS (
            ${this.percentileCapSelectClause(
              metric.capValue ?? 1,
              "__userMetricAgg"
            )}
        )
        `
          : ""
      }
      ${
        ratioMetric
          ? `, __userDenominatorAgg AS (
              SELECT
                d.variation AS variation,
                d.dimension AS dimension,
                ${cumulativeDate ? `dr.day AS day,` : ""}
                d.${baseIdType} AS ${baseIdType},
                ${this.getAggregateMetricColumn(denominator, true)} as value
              FROM
                __distinctUsers d
                JOIN __denominator${denominatorMetrics.length - 1} m ON (
                  m.${baseIdType} = d.${baseIdType}
                )
                ${cumulativeDate ? "CROSS JOIN __dateRange dr" : ""}
              WHERE
                ${this.getConversionWindowClause(
                  "d.timestamp",
                  "m.timestamp",
                  denominator,
                  ignoreConversionEnd
                )}
                ${
                  cumulativeDate
                    ? `AND ${this.castToDate(
                        "m.timestamp"
                      )} <= dr.day AND d.first_exposure_date <= dr.day`
                    : ""
                }
              GROUP BY
                d.variation,
                d.dimension,
                ${cumulativeDate ? `dr.day,` : ""}
                d.${baseIdType}
            )
            ${
              denominatorIsPercentileCapped
                ? `
              , __capValueDenominator AS (
                ${this.percentileCapSelectClause(
                  denominator.capValue ?? 1,
                  "__userDenominatorAgg"
                )}
              )
              `
                : ""
            }`
          : ""
      }
      ${
        isRegressionAdjusted
          ? `
        , __userCovariateMetric as (
          SELECT
            d.variation AS variation,
            d.dimension AS dimension,
            d.${baseIdType} AS ${baseIdType},
            ${this.getAggregateMetricColumn(metric)} as value
          FROM
            __distinctUsers d
          JOIN __metric m ON (
            m.${baseIdType} = d.${baseIdType}
          )
          WHERE 
            m.timestamp >= d.preexposure_start
            AND m.timestamp < d.preexposure_end
          GROUP BY
            d.variation,
            d.dimension,
            d.${baseIdType}
        )
        `
          : ""
      }
      -- One row per variation/dimension with aggregations
      SELECT
        m.variation AS variation,
        ${
          cumulativeDate ? `${this.formatDate("m.day")}` : "m.dimension"
        } AS dimension,
        COUNT(*) AS users,
        '${this.getStatisticType(
          ratioMetric,
          isRegressionAdjusted
        )}' as statistic_type,
        '${
          isBinomialMetric(metric) ? "binomial" : "count"
        }' as main_metric_type,
        ${
          isPercentileCapped
            ? "MAX(COALESCE(cap.cap_value, 0)) as main_cap_value,"
            : ""
        }
        SUM(${capCoalesceMetric}) AS main_sum,
        SUM(POWER(${capCoalesceMetric}, 2)) AS main_sum_squares
        ${
          ratioMetric
            ? `,
          '${
            isBinomialMetric(denominator) ? "binomial" : "count"
          }' as denominator_metric_type,
          ${
            denominatorIsPercentileCapped
              ? "MAX(COALESCE(capd.cap_value, 0)) as denominator_cap_value,"
              : ""
          }
          SUM(${capCoalesceDenominator}) AS denominator_sum,
          SUM(POWER(${capCoalesceDenominator}, 2)) AS denominator_sum_squares,
          SUM(${capCoalesceDenominator} * ${capCoalesceMetric}) AS main_denominator_sum_product
        `
            : ""
        }
        ${
          isRegressionAdjusted
            ? `,
          '${
            isBinomialMetric(metric) ? "binomial" : "count"
          }' as covariate_metric_type,
          SUM(${capCoalesceCovariate}) AS covariate_sum,
          SUM(POWER(${capCoalesceCovariate}, 2)) AS covariate_sum_squares,
          SUM(${capCoalesceMetric} * ${capCoalesceCovariate}) AS main_covariate_sum_product
          `
            : ""
        }
      FROM
        __userMetricAgg m
      ${
        ratioMetric
          ? `LEFT JOIN __userDenominatorAgg d ON (
              d.${baseIdType} = m.${baseIdType}
              ${cumulativeDate ? "AND d.day = m.day" : ""}
            )
            ${
              denominatorIsPercentileCapped
                ? "CROSS JOIN __capValueDenominator capd"
                : ""
            }`
          : ""
      }
      ${
        isRegressionAdjusted
          ? `
          LEFT JOIN __userCovariateMetric c
          ON (c.${baseIdType} = m.${baseIdType})
          `
          : ""
      }
      ${isPercentileCapped ? `CROSS JOIN __capValue cap` : ""}
      ${
        "ignoreNulls" in metric && metric.ignoreNulls
          ? `WHERE m.value != 0`
          : ""
      }
      GROUP BY
        m.variation,
        ${cumulativeDate ? `${this.formatDate("m.day")}` : "m.dimension"}
    `,
      this.getFormatDialect()
    );
  }
  percentileCapSelectClause(capPercentile: number, metricTable: string) {
    return `
      SELECT
        PERCENTILE_CONT(${capPercentile}) WITHIN GROUP (ORDER BY value) AS cap_value
      FROM ${metricTable}
      WHERE value IS NOT NULL
      `;
  }
  private capCoalesceValue(
    valueCol: string,
    metric: ExperimentMetricInterface,
    capTablePrefix: string = "c"
  ): string {
    if (metric?.capping === "absolute" && metric.capValue) {
      return `LEAST(
        ${this.ensureFloat(`COALESCE(${valueCol}, 0)`)},
        ${metric.capValue}
      )`;
    }
    if (
      metric?.capping === "percentile" &&
      metric.capValue &&
      metric.capValue < 1
    ) {
      return `LEAST(
        ${this.ensureFloat(`COALESCE(${valueCol}, 0)`)},
        ${capTablePrefix}.cap_value
      )`;
    }
    return `COALESCE(${valueCol}, 0)`;
  }
  getExperimentResultsQuery(): string {
    throw new Error("Not implemented");
  }
  async getExperimentResults(): Promise<ExperimentQueryResponses> {
    throw new Error("Not implemented");
  }

  getDefaultDatabase() {
    return "";
  }

  generateTablePath(
    tableName: string,
    schema?: string,
    database?: string,
    queryRequiresSchema?: boolean
  ) {
    let path = "";
    // Add database if required
    if (this.requiresDatabase) {
      database = database || this.getDefaultDatabase();
      if (!database) {
        throw new MissingDatasourceParamsError(
          "No database provided. Please edit the connection settings and try again."
        );
      }
      path += database + ".";
    }

    // Add schema if required
    if (this.requiresSchema || queryRequiresSchema) {
      if (!schema) {
        throw new MissingDatasourceParamsError(
          "No schema provided. Please edit the connection settings and try again."
        );
      }
      path += schema + ".";
    }

    // Add table name
    path += tableName;
    return this.requiresEscapingPath ? `\`${path}\`` : path;
  }

  getInformationSchemaTable(schema?: string, database?: string): string {
    return this.generateTablePath(
      "information_schema.columns",
      schema,
      database
    );
  }

  getInformationSchemaWhereClause(): string {
    return "table_schema NOT IN ('information_schema')";
  }
  async getInformationSchema(): Promise<InformationSchema[]> {
    const sql = `
  SELECT 
    table_name as table_name,
    table_catalog as table_catalog,
    table_schema as table_schema,
    count(column_name) as column_count 
  FROM
    ${this.getInformationSchemaTable()}
    WHERE ${this.getInformationSchemaWhereClause()}
    GROUP BY table_name, table_schema, table_catalog`;

    const results = await this.runQuery(format(sql, this.getFormatDialect()));

    if (!results.rows.length) {
      throw new Error(`No tables found.`);
    }

    return formatInformationSchema(
      results.rows as RawInformationSchema[],
      this.type
    );
  }
  async getTableData(
    databaseName: string,
    tableSchema: string,
    tableName: string
  ): Promise<{ tableData: null | unknown[] }> {
    const sql = `
  SELECT 
    data_type as data_type,
    column_name as column_name 
  FROM
    ${this.getInformationSchemaTable(tableSchema, databaseName)}
  WHERE 
    table_name = '${tableName}'
    AND table_schema = '${tableSchema}'
    AND table_catalog = '${databaseName}'`;

    const results = await this.runQuery(format(sql, this.getFormatDialect()));

    return { tableData: results.rows };
  }
  getSchemaFormatConfig(schemaFormat: AutoMetricSchemas): SchemaFormatConfig {
    switch (schemaFormat) {
      case "amplitude": {
        return {
          trackedEventTableName: `EVENTS_${
            this.settings.schemaOptions?.projectId || `*`
          }`,
          eventColumn: "event_type",
          timestampColumn: "event_time",
          userIdColumn: "user_id",
          anonymousIdColumn: "amplitude_id",
          getMetricTableName: ({ schema }) =>
            this.generateTablePath(
              `EVENTS_${this.settings.schemaOptions?.projectId || `*`}`,
              schema
            ),
          getDateLimitClause: (start: Date, end: Date) =>
            `event_time BETWEEN '${formatDate(
              start,
              "yyyy-MM-dd"
            )}' AND'${formatDate(end, "yyyy-MM-dd")}'`,
          getAdditionalEvents: () => [],
          getMetricWhereClause: (eventName: string) =>
            `WHERE event_name = '${eventName}'`,
        };
      }
      case "ga4": {
        return {
          trackedEventTableName: "events_*",
          eventColumn: "event_name",
          timestampColumn: "TIMESTAMP_MICROS(event_timestamp)",
          userIdColumn: "user_id",
          anonymousIdColumn: "user_pseudo_id",
          getMetricTableName: ({ schema }) =>
            this.generateTablePath("events_*", schema),
          getDateLimitClause: (start: Date, end: Date) =>
            `((_TABLE_SUFFIX BETWEEN '${formatDate(
              start,
              "yyyyMMdd"
            )}' AND '${formatDate(
              end,
              "yyyyMMdd"
            )}') OR (_TABLE_SUFFIX BETWEEN 'intraday_${formatDate(
              start,
              "yyyyMMdd"
            )}' AND 'intraday_${formatDate(end, "yyyyMMdd")}'))`,
          getAdditionalEvents: () => [],
          getMetricWhereClause: (eventName: string) =>
            `WHERE ((_TABLE_SUFFIX BETWEEN '{{date startDateISO "yyyyMMdd"}}' AND '{{date endDateISO "yyyyMMdd"}}') OR
 (_TABLE_SUFFIX BETWEEN 'intraday_{{date startDateISO "yyyyMMdd"}}' AND 'intraday_{{date endDateISO "yyyyMMdd"}}')) 
AND event_name = '${eventName}'`,
        };
      }
      case "rudderstack":
      case "segment":
        return {
          trackedEventTableName: "tracks",
          eventColumn: "event",
          timestampColumn: "received_at",
          userIdColumn: "user_id",
          anonymousIdColumn: "anonymous_id",
          displayNameColumn: "event_text",
          getMetricTableName: ({ eventName, schema }) =>
            this.generateTablePath(eventName, schema),
          getDateLimitClause: (start: Date, end: Date) =>
            `received_at BETWEEN '${formatDate(
              start,
              "yyyy-MM-dd"
            )}' AND'${formatDate(end, "yyyy-MM-dd")}'`,
          getAdditionalEvents: () => [
            {
              eventName: "pages",
              displayName: "Page Viewed",
              groupBy: "event",
            },
            {
              eventName: "screens",
              displayName: "Screen Viewed",
              groupBy: "event",
            },
          ],
          getMetricWhereClause: () => "",
        };
    }
  }

  getAutoGeneratedMetricSqlQuery(
    eventName: string,
    hasUserId: boolean,
    schemaFormat: AutoMetricSchemas,
    type: MetricType,
    schema?: string
  ): string {
    const {
      timestampColumn,
      userIdColumn,
      anonymousIdColumn,
      getMetricTableName,
      getMetricWhereClause,
    } = this.getSchemaFormatConfig(schemaFormat);

    const sqlQuery = `
      SELECT
        ${hasUserId ? `${userIdColumn}, ` : ""}
        ${anonymousIdColumn} as anonymous_id,
        ${timestampColumn} as timestamp
        ${type === "count" ? `, 1 as value` : ""}
        FROM ${getMetricTableName({ eventName, schema })}
      ${getMetricWhereClause(eventName)}
`;
    return format(sqlQuery, this.getFormatDialect());
  }

  doesMetricExist(
    existingMetrics: MetricInterface[],
    sqlQuery: string,
    type: MetricType
  ): boolean {
    return existingMetrics.some(
      (metric) => metric.sql === sqlQuery && metric.type === type
    );
  }
  getMetricsToCreate(
    result: TrackedEventResponseRow,
    schemaFormat: AutoMetricSchemas,
    existingMetrics: MetricInterface[],
    schema?: string
  ): {
    name: string;
    type: MetricType;
    sql: string;
  }[] {
    const metricsToCreate: {
      name: string;
      type: MetricType;
      sql: string;
      exists?: boolean;
    }[] = [];

    const binomialSqlQuery = this.getAutoGeneratedMetricSqlQuery(
      result.event,
      result.hasUserId,
      schemaFormat,
      "binomial",
      schema
    );

    //TODO Build some logic where based on the event, we determine what metrics to create (by default, we create binomial and count) for every event
    metricsToCreate.push({
      name: result.displayName,
      type: "binomial",
      exists: this.doesMetricExist(
        existingMetrics,
        binomialSqlQuery,
        "binomial"
      ),
      sql: binomialSqlQuery,
    });

    const countSqlQuery = this.getAutoGeneratedMetricSqlQuery(
      result.event,
      result.hasUserId,
      schemaFormat,
      "count",
      schema
    );

    metricsToCreate.push({
      name: `Count of ${result.displayName}`,
      type: "count",
      exists: this.doesMetricExist(existingMetrics, countSqlQuery, "count"),
      sql: countSqlQuery,
    });

    return metricsToCreate;
  }

  private getTrackedEventSql(
    eventColumn: string,
    displayNameColumn: string,
    userIdColumn: string,
    timestampColumn: string,
    trackedEventTableName: string,
    getDateLimitClause: (start: Date, end: Date) => string,
    schema: string,
    groupByColumn?: string
  ) {
    const end = new Date();
    const start = subDays(new Date(), 7);

    return `
      SELECT
        ${eventColumn} as event,
        MAX(${displayNameColumn}) as displayName,
        (CASE WHEN COUNT(${userIdColumn}) > 0 THEN 1 ELSE 0 END) as hasUserId,
        COUNT (*) as count,
        MAX(${timestampColumn}) as lastTrackedAt
      FROM
        ${this.generateTablePath(trackedEventTableName, schema)}
      WHERE ${getDateLimitClause(start, end)}
      AND ${eventColumn} NOT IN ('experiment_viewed', 'experiment_started')
      GROUP BY ${groupByColumn || eventColumn}
    `;
  }
  async getEventsTrackedByDatasource(
    schemaFormat: AutoMetricSchemas,
    existingMetrics: MetricInterface[],
    schema?: string
  ): Promise<TrackedEventData[]> {
    const {
      trackedEventTableName,
      userIdColumn,
      eventColumn,
      timestampColumn,
      displayNameColumn,
      getAdditionalEvents,
      getDateLimitClause,
    } = this.getSchemaFormatConfig(schemaFormat);

    const sql = this.getTrackedEventSql(
      eventColumn,
      displayNameColumn || eventColumn,
      userIdColumn,
      timestampColumn,
      trackedEventTableName,
      getDateLimitClause,
      schema || ""
    );

    const { rows: resultRows } = await this.runQuery(
      format(sql, this.getFormatDialect())
    );

    const additionalEvents = getAdditionalEvents();

    for (const additionalEvent of additionalEvents) {
      const sql = this.getTrackedEventSql(
        `'${additionalEvent.eventName}'`,
        `'${additionalEvent.displayName}'`,
        userIdColumn,
        timestampColumn,
        additionalEvent.eventName,
        getDateLimitClause,
        schema || "",
        additionalEvent.groupBy
      );

      try {
        const { rows: additionalEventResults } = await this.runQuery(
          format(sql, this.getFormatDialect())
        );

        additionalEventResults.forEach((result) => {
          if (result.count > 0) {
            resultRows.push(result);
          }
        });
      } catch (e) {
        // This happens when the table doesn't exists - this is optional, so just ignoring
      }
    }

    if (!resultRows) {
      throw new Error(`No events found.`);
    }

    return resultRows.map((result) => {
      const row = result as TrackedEventResponseRow;
      const processedEventData: TrackedEventData = {
        ...row,
        lastTrackedAt: result.lastTrackedAt.value
          ? new Date(result.lastTrackedAt.value)
          : new Date(result.lastTrackedAt),
        metricsToCreate: this.getMetricsToCreate(
          row,
          schemaFormat,
          existingMetrics,
          schema
        ),
      };
      return processedEventData;
    });
  }

  private getMetricQueryFormat(metric: MetricInterface) {
    return metric.queryFormat || (metric.sql ? "sql" : "builder");
  }

  getDateTable(dateArray: string[]): string {
    const dateString = dateArray
      .map((d) => `SELECT ${d} AS day`)
      .join("\nUNION ALL\n");
    return `
      SELECT ${this.dateTrunc(this.castToDate("t.day"))} AS day
      FROM
        (
          ${dateString}
        ) t
     `;
  }

  private getMetricCTE({
    metric,
    baseIdType,
    idJoinMap,
    startDate,
    endDate,
    experimentId,
    factTableMap,
    useDenominator,
  }: {
    metric: ExperimentMetricInterface;
    baseIdType: string;
    idJoinMap: Record<string, string>;
    startDate: Date;
    endDate: Date | null;
    experimentId?: string;
    factTableMap: FactTableMap;
    useDenominator?: boolean;
  }) {
    const cols = this.getMetricColumns(
      metric,
      factTableMap,
      "m",
      useDenominator
    );

    // Determine the identifier column to select from
    let userIdCol = cols.userIds[baseIdType] || "user_id";
    let join = "";

    const userIdTypes = getUserIdTypes(metric, factTableMap, useDenominator);

    const isFact = isFactMetric(metric);
    const queryFormat = isFact ? "fact" : this.getMetricQueryFormat(metric);
    const columnRef = isFact
      ? useDenominator
        ? metric.denominator
        : metric.numerator
      : null;

    // For fact metrics with a WHERE clause
    const factTable = isFact
      ? factTableMap.get(columnRef?.factTableId || "")
      : undefined;

    if (isFact && !factTable) {
      throw new Error("Could not find fact table");
    }

    // query builder does not use a sub-query to get a the userId column to
    // equal the userIdType, so when using the query builder, continue to
    // use the actual input column name rather than the id type
    if (userIdTypes.includes(baseIdType)) {
      userIdCol = queryFormat === "builder" ? userIdCol : baseIdType;
    } else if (userIdTypes.length > 0) {
      for (let i = 0; i < userIdTypes.length; i++) {
        const userIdType: string = userIdTypes[i];
        if (userIdType in idJoinMap) {
          const metricUserIdCol =
            queryFormat === "builder"
              ? cols.userIds[userIdType]
              : `m.${userIdType}`;
          join = `JOIN ${idJoinMap[userIdType]} i ON (i.${userIdType} = ${metricUserIdCol})`;
          userIdCol = `i.${baseIdType}`;
          break;
        }
      }
    }

    // BQ datetime cast for SELECT statements (do not use for where)
    const timestampDateTimeColumn = this.castUserDateCol(cols.timestamp);

    const schema = this.getSchema();

    const where: string[] = [];
    let sql = "";

    // From old, deprecated query builder UI
    if (queryFormat === "builder" && !isFact && metric.conditions?.length) {
      metric.conditions.forEach((c) => {
        where.push(`m.${c.column} ${c.operator} '${c.value}'`);
      });
    }

    // Add filters from the Metric
    if (isFact && factTable && columnRef) {
      const filterIds: Set<string> = new Set();
      if (columnRef.filters) {
        columnRef.filters.forEach((f) => filterIds.add(f));
      }
      filterIds.forEach((filterId) => {
        const filter = factTable.filters.find((f) => f.id === filterId);
        if (filter) {
          where.push(filter.value);
        }
      });

      sql = factTable.sql;
    }

    if (!isFact && queryFormat === "sql") {
      sql = metric.sql || "";
    }

    // Add a rough date filter to improve query performance
    if (startDate) {
      where.push(`${cols.timestamp} >= ${this.toTimestamp(startDate)}`);
    }
    // endDate is now meaningful if ignoreConversionEnd
    if (endDate) {
      where.push(`${cols.timestamp} <= ${this.toTimestamp(endDate)}`);
    }

    return `-- Metric (${metric.name})
      SELECT
        ${userIdCol} as ${baseIdType},
        ${cols.value} as value,
        ${timestampDateTimeColumn} as timestamp
      FROM
        ${
          queryFormat === "sql" || queryFormat === "fact"
            ? `(
              ${compileSqlTemplate(sql, {
                startDate,
                endDate: endDate || undefined,
                experimentId,
                templateVariables: getMetricTemplateVariables(
                  metric,
                  factTableMap,
                  useDenominator
                ),
              })}
            )`
            : !isFact
            ? (schema && !metric.table?.match(/\./) ? schema + "." : "") +
              (metric.table || "")
            : ""
        } m
        ${join}
        ${where.length ? `WHERE ${where.join(" AND ")}` : ""}
    `;
  }

  // Only include users who entered the experiment before this timestamp
  private getExperimentEndDate(
    settings: ExperimentSnapshotSettings,
    conversionWindowHours: number
  ): Date {
    // If we need to wait until users have had a chance to fully convert
    if (settings.skipPartialData) {
      // The last date allowed to give enough time for users to convert
      const conversionWindowEndDate = new Date();
      conversionWindowEndDate.setHours(
        conversionWindowEndDate.getHours() - conversionWindowHours
      );

      // Use the earliest of either the conversion end date or the phase end date
      return new Date(
        Math.min(settings.endDate.getTime(), conversionWindowEndDate.getTime())
      );
    }

    // Otherwise, use the actual end date
    return settings.endDate;
  }

  private getSegmentCTE(
    segment: SegmentInterface,
    baseIdType: string,
    idJoinMap: Record<string, string>,
    sqlVars?: SQLVars
  ) {
    // replace template variables
    const segmentSql = sqlVars
      ? compileSqlTemplate(segment.sql, sqlVars)
      : segment.sql;
    const dateCol = this.castUserDateCol("s.date");

    const userIdType = segment.userIdType || "user_id";

    // Need to use an identity join table
    if (userIdType !== baseIdType) {
      return `-- Segment (${segment.name})
      SELECT
        i.${baseIdType},
        ${dateCol} as date
      FROM
        (
          ${segmentSql}
        ) s
        JOIN ${idJoinMap[userIdType]} i ON ( i.${userIdType} = s.${userIdType} )
      `;
    }

    if (dateCol !== "s.date") {
      return `-- Segment (${segment.name})
      SELECT
        s.${userIdType},
        ${dateCol} as date
      FROM
        (
          ${segmentSql}
        ) s`;
    }

    return `-- Segment (${segment.name})
    ${segmentSql}
    `;
  }

  private getDimensionCTE(
    dimension: DimensionInterface,
    baseIdType: string,
    idJoinMap: Record<string, string>
  ) {
    const userIdType = dimension.userIdType || "user_id";

    // Need to use an identity join table
    if (userIdType !== baseIdType) {
      return `-- Dimension (${dimension.name})
      SELECT
        i.${baseIdType},
        d.value
      FROM
        (
          ${dimension.sql}
        ) d
        JOIN ${idJoinMap[userIdType]} i ON ( i.${userIdType} = d.${userIdType} )
      `;
    }

    return `-- Dimension (${dimension.name})
    ${dimension.sql}
    `;
  }

  private addCaseWhenTimeFilter(
    col: string,
    metric: ExperimentMetricInterface,
    ignoreConversionEnd: boolean,
    cumulativeDate: boolean
  ): string {
    return `${this.ifElse(
      `
        ${this.getConversionWindowClause(
          "d.timestamp",
          "m.timestamp",
          metric,
          ignoreConversionEnd
        )}
        ${
          cumulativeDate ? `AND ${this.dateTrunc("m.timestamp")} <= dr.day` : ""
        }
      `,
      `${col}`,
      `NULL`
    )}`;
  }

  private getAggregateMetricColumn(
    metric: ExperimentMetricInterface,
    useDenominator?: boolean
  ) {
    // Fact Metrics
    if (isFactMetric(metric)) {
      const columnRef = useDenominator ? metric.denominator : metric.numerator;
      if (
        metric.metricType === "proportion" ||
        columnRef?.column === "$$distinctUsers"
      ) {
        return `MAX(COALESCE(value, 0))`;
      } else if (columnRef?.column === "$$count") {
        return `COUNT(value)`;
      } else {
        return `SUM(COALESCE(value, 0))`;
      }
    }

    // Non-fact Metrics

    // Binomial metrics don't have a value, so use hard-coded "1" as the value
    if (metric.type === "binomial") {
      return `MAX(COALESCE(value, 0))`;
    }

    // SQL editor
    if (this.getMetricQueryFormat(metric) === "sql") {
      // Custom aggregation that's a hardcoded number (e.g. "1")
      if (metric.aggregation && Number(metric.aggregation)) {
        // Note that if user has conversion row but value IS NULL, this will
        // return 0 for that user rather than `metric.aggregation`
        return this.ifElse("value IS NOT NULL", metric.aggregation, "0");
      }
      // Other custom aggregation
      else if (metric.aggregation) {
        return replaceCountStar(metric.aggregation, `value`);
      }
      // Standard aggregation (SUM)
      else {
        return `SUM(COALESCE(value, 0))`;
      }
    }
    // Query builder
    else {
      // Count metrics that specify a distinct column to count
      if (metric.type === "count" && metric.column) {
        return `COUNT(DISTINCT (value))`;
      }
      // Count metrics just do a simple count of rows by default
      else if (metric.type === "count") {
        return `COUNT(value)`;
      }
      // Revenue and duration metrics use MAX by default
      else {
        return `MAX(COALESCE(value, 0))`;
      }
    }
  }

  private getMetricColumns(
    metric: ExperimentMetricInterface,
    factTableMap: FactTableMap,
    alias = "m",
    useDenominator?: boolean
  ) {
    if (isFactMetric(metric)) {
      const userIds: Record<string, string> = {};
      getUserIdTypes(metric, factTableMap, useDenominator).forEach(
        (userIdType) => {
          userIds[userIdType] = `${alias}.${userIdType}`;
        }
      );

      const columnRef = useDenominator ? metric.denominator : metric.numerator;

      const value =
        metric.metricType === "proportion" ||
        !columnRef ||
        columnRef.column === "$$distinctUsers" ||
        columnRef.column === "$$count"
          ? "1"
          : `${alias}.${columnRef.column}`;

      return {
        userIds,
        timestamp: `${alias}.timestamp`,
        value,
      };
    }

    const queryFormat = this.getMetricQueryFormat(metric);

    // Directly inputting SQL (preferred)
    if (queryFormat === "sql") {
      const userIds: Record<string, string> = {};
      metric.userIdTypes?.forEach((userIdType) => {
        userIds[userIdType] = `${alias}.${userIdType}`;
      });
      return {
        userIds: userIds,
        timestamp: `${alias}.timestamp`,
        value: metric.type === "binomial" ? "1" : `${alias}.value`,
      };
    }

    // Using the query builder (legacy)
    let valueCol = metric.column || "value";
    if (metric.type === "duration" && valueCol.match(/\{alias\}/)) {
      valueCol = valueCol.replace(/\{alias\}/g, alias);
    } else {
      valueCol = alias + "." + valueCol;
    }
    const value = metric.type !== "binomial" && metric.column ? valueCol : "1";

    const userIds: Record<string, string> = {};
    metric.userIdTypes?.forEach((userIdType) => {
      userIds[userIdType] = `${alias}.${
        metric.userIdColumns?.[userIdType] || userIdType
      }`;
    });

    return {
      userIds,
      timestamp: `${alias}.${metric.timestampColumn || "received_at"}`,
      value,
    };
  }

  private getIdentitiesQuery(
    settings: DataSourceSettings,
    id1: string,
    id2: string,
    from: Date,
    to: Date | undefined,
    experimentId?: string
  ) {
    if (settings?.queries?.identityJoins) {
      for (let i = 0; i < settings.queries.identityJoins.length; i++) {
        const join = settings?.queries?.identityJoins[i];
        if (
          join.query.length > 6 &&
          join.ids.includes(id1) &&
          join.ids.includes(id2)
        ) {
          return `
          SELECT
            ${id1},
            ${id2}
          FROM
            (
              ${compileSqlTemplate(join.query, {
                startDate: from,
                endDate: to,
                experimentId,
              })}
            ) i
          GROUP BY
            ${id1}, ${id2}
          `;
        }
      }
    }
    if (settings?.queries?.pageviewsQuery) {
      const timestampColumn = "i.timestamp";

      if (
        ["user_id", "anonymous_id"].includes(id1) &&
        ["user_id", "anonymous_id"].includes(id2)
      ) {
        return `
        SELECT
          user_id,
          anonymous_id
        FROM
          (${compileSqlTemplate(settings.queries.pageviewsQuery, {
            startDate: from,
            endDate: to,
            experimentId,
          })}) i
        WHERE
          ${timestampColumn} >= ${this.toTimestamp(from)}
          ${to ? `AND ${timestampColumn} <= ${this.toTimestamp(to)}` : ""}
        GROUP BY
          user_id, anonymous_id
        `;
      }
    }

    throw new Error(`Missing identifier join table for '${id1}' and '${id2}'.`);
  }
}
