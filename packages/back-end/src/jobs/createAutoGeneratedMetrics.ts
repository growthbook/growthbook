/* eslint-disable no-console */
import Agenda, { Job } from "agenda";
import uniqid from "uniqid";
import { getDataSourceById } from "../models/DataSourceModel";
import { insertMetrics } from "../models/MetricModel";
import { MetricInterface, MetricType } from "../../types/metric";
import { getSourceIntegrationObject } from "../services/datasource";
import { logger } from "../util/logger";

const CREATE_AUTOGENERATED_METRICS_JOB_NAME = "createAutoGeneratedMetrics";

type CreateAutoGeneratedMetricsJob = Job<{
  organization: string;
  datasourceId: string;
  metricsToCreate: Pick<
    MetricInterface,
    | "name"
    | "type"
    | "sql"
    | "id"
    | "organization"
    | "datasource"
    | "dateCreated"
    | "dateUpdated"
  >[];
}>;

let agenda: Agenda;
export default function (ag: Agenda) {
  agenda = ag;

  agenda.define(
    CREATE_AUTOGENERATED_METRICS_JOB_NAME,
    async (job: CreateAutoGeneratedMetricsJob) => {
      const { datasourceId, organization, metricsToCreate } = job.attrs.data;

      try {
        const datasource = await getDataSourceById(datasourceId, organization);

        if (!datasource) throw new Error("No datasource");

        const schemaFormat = datasource.settings.schemaFormat || "custom";

        if (schemaFormat === "custom")
          throw new Error(
            `Unable to automatically generate metrics for a custom schema format.`
          );

        const integration = getSourceIntegrationObject(datasource);

        if (!integration.getSourceProperties().supportsAutoGeneratedMetrics)
          throw new Error(
            "Auto generated metrics not supported for this data source"
          );

        const metrics: Pick<
          MetricInterface,
          | "name"
          | "type"
          | "sql"
          | "id"
          | "organization"
          | "datasource"
          | "dateCreated"
          | "dateUpdated"
        >[] = [];

        metricsToCreate.forEach((metric) => {
          metric.id = uniqid("met_");
          metric.organization = organization;
          metric.datasource = datasourceId;
          metric.dateCreated = new Date();
          metric.dateUpdated = new Date();
          metrics.push(metric);
        });

        await insertMetrics(metrics);
      } catch (e) {
        logger.error(
          e,
          "Failed to generate automatic metrics. Reason: " + e.message
        );
      }
    }
  );
}

export async function queueCreateAutoGeneratedMetrics(
  datasourceId: string,
  organization: string,
  metricsToCreate: { name: string; type: MetricType; sql: string }[]
) {
  if (!datasourceId || !organization || !metricsToCreate) return;

  const job = agenda.create(CREATE_AUTOGENERATED_METRICS_JOB_NAME, {
    organization,
    datasourceId,
    metricsToCreate,
  }) as CreateAutoGeneratedMetricsJob;
  job.unique({ datasourceId, organization, metricsToCreate });
  job.schedule(new Date());
  await job.save();
}
