import addExperimentResultsJob from "back-end/src/jobs/updateExperimentResults";
import refreshFactTableColumns from "back-end/src/jobs/refreshFactTableColumns";
import updateScheduledFeatures from "back-end/src/jobs/updateScheduledFeatures";
import addWebhooksJob from "back-end/src/jobs/webhooks";
import addMetricUpdateJob from "back-end/src/jobs/updateMetrics";
import addProxyUpdateJob from "back-end/src/jobs/proxyUpdate";
import createInformationSchemaJob from "back-end/src/jobs/createInformationSchema";
import updateInformationSchemaJob from "back-end/src/jobs/updateInformationSchema";
import createAutoGeneratedMetrics from "back-end/src/jobs/createAutoGeneratedMetrics";
import { CRON_ENABLED, IS_CLOUD } from "back-end/src/util/secrets";
import { getAgendaInstance } from "back-end/src/services/queueing";
import updateStaleInformationSchemaTable from "back-end/src/jobs/updateStaleInformationSchemaTable";
import expireOldQueries from "back-end/src/jobs/expireOldQueries";
import addSdkWebhooksJob from "back-end/src/jobs/sdkWebhooks";
import updateLicenseJob, {
  queueUpdateLicense,
} from "back-end/src/jobs/updateLicense";
import createAutoGeneratedFactTables from "back-end/src/jobs/createAutoGeneratedFactTables";
import deleteOldAgendaJobs from "back-end/src/jobs/deleteOldAgendaJobs";
import { logger } from "back-end/src/util/logger";

export async function queueInit() {
  if (!CRON_ENABLED) return;
  const agenda = getAgendaInstance();

  addExperimentResultsJob(agenda);
  updateScheduledFeatures(agenda);
  addMetricUpdateJob(agenda);
  addWebhooksJob(agenda);
  addProxyUpdateJob(agenda);
  createInformationSchemaJob(agenda);
  updateInformationSchemaJob(agenda);
  createAutoGeneratedMetrics(agenda);
  createAutoGeneratedFactTables(agenda);
  updateStaleInformationSchemaTable(agenda);
  expireOldQueries(agenda);
  refreshFactTableColumns(agenda);
  addSdkWebhooksJob(agenda);
  updateLicenseJob(agenda);

  // Make sure we have index needed to delete efficiently
  agenda._collection
    .createIndex({ lastFinishedAt: 1, nextRunAt: 1 })
    .catch((e) => {
      logger.error("Error creating index needed for deleteOldAgendaJobs: " + e);
    });
  deleteOldAgendaJobs(agenda);

  await agenda.start();

  if (!IS_CLOUD) {
    await queueUpdateLicense();
  }
}
