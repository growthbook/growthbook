/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/projects": {
    /** Get all projects */
    get: operations["listProjects"];
  };
  "/projects/{id}": {
    /** Get a single project */
    get: operations["getProject"];
  };
  "/dimensions": {
    /** Get all dimensions */
    get: operations["listDimensions"];
  };
  "/dimensions/{id}": {
    /** Get a single dimension */
    get: operations["getDimension"];
  };
  "/segments": {
    /** Get all segments */
    get: operations["listSegments"];
  };
  "/segments/{id}": {
    /** Get a single segment */
    get: operations["getSegment"];
  };
  "/metrics": {
    /** Get all metrics */
    get: operations["listMetrics"];
  };
  "/metrics/{id}": {
    /** Get a single metric */
    get: operations["getMetric"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PaginationFields: {
      limit: number;
      offset: number;
      count: number;
      total: number;
      hasMore: boolean;
      nextOffset: OneOf<[number, null]>;
    };
    Dimension: {
      id: string;
      dateCreated: string;
      dateUpdated: string;
      owner: string;
      datasourceId: string;
      identifierType: string;
      name: string;
      query: string;
    };
    Metric: {
      id: string;
      dateCreated: string;
      dateUpdated: string;
      owner: string;
      datasourceId: string;
      name: string;
      description: string;
      type: string;
      tags: string[];
      projects: string[];
      archived: boolean;
      behavior: {
        /** @enum {string} */
        goal: "increase" | "decrease";
        cap: number;
        conversionWindowStart: number;
        conversionWindowEnd: number;
        riskThresholdSuccess: number;
        riskThresholdDanger: number;
        minPercentChange: number;
        maxPercentChange: number;
        minSampleSize: number;
      };
      sql?: {
        identifierTypes: string[];
        conversionSQL: string;
        userAggregationSQL: string;
        denominatorMetricId: string;
        builder?: {
          identifierTypeColumns: {
            identifierType: string;
            columnName: string;
          }[];
          tableName: string;
          valueColumnName: string;
          timestampColumnName: string;
          conditions: {
            column: string;
            operator: string;
            value: string;
          }[];
        };
      };
      mixpanel?: {
        eventName: string;
        eventValue: string;
        userAggregation: string;
        conditions: {
          property: string;
          operator: string;
          value: string;
        }[];
      };
    };
    Project: {
      id: string;
      name: string;
      /** Format: date-time */
      dateCreated: string;
      /** Format: date-time */
      dateUpdated: string;
    };
    Segment: {
      id: string;
      owner: string;
      datasourceId: string;
      identifierType: string;
      name: string;
      query: string;
      dateCreated: string;
      dateUpdated: string;
    };
  };
  responses: {
    Error: never;
  };
  parameters: {
    id: string;
    limit: number;
    offset: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  listProjects: {
    /** Get all projects */
    responses: {
      200: {
        content: {
          "application/json": {
            projects: components["schemas"]["Project"][];
          } & components["schemas"]["PaginationFields"];
        };
      };
    };
  };
  getProject: {
    /** Get a single project */
    responses: {
      200: {
        content: {
          "application/json": {
            project: components["schemas"]["Project"];
          };
        };
      };
    };
  };
  listDimensions: {
    /** Get all dimensions */
    responses: {
      200: {
        content: {
          "application/json": {
            dimensions: components["schemas"]["Dimension"][];
          } & components["schemas"]["PaginationFields"];
        };
      };
    };
  };
  getDimension: {
    /** Get a single dimension */
    responses: {
      200: {
        content: {
          "application/json": {
            dimension: components["schemas"]["Dimension"];
          };
        };
      };
    };
  };
  listSegments: {
    /** Get all segments */
    responses: {
      200: {
        content: {
          "application/json": {
            segments: components["schemas"]["Segment"][];
          } & components["schemas"]["PaginationFields"];
        };
      };
    };
  };
  getSegment: {
    /** Get a single segment */
    responses: {
      200: {
        content: {
          "application/json": {
            segment: components["schemas"]["Segment"];
          };
        };
      };
    };
  };
  listMetrics: {
    /** Get all metrics */
    responses: {
      200: {
        content: {
          "application/json": {
            metrics: components["schemas"]["Metric"][];
          } & components["schemas"]["PaginationFields"];
        };
      };
    };
  };
  getMetric: {
    /** Get a single metric */
    responses: {
      200: {
        content: {
          "application/json": {
            metric: components["schemas"]["Metric"];
          };
        };
      };
    };
  };
}
