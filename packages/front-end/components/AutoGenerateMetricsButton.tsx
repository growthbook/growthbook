import { DataSourceInterfaceWithParams } from "back-end/types/datasource";
import { useMemo } from "react";
import { useDefinitions } from "@/services/DefinitionsContext";
import Button from "@/components/Radix/Button";

type Props = {
  setShowAutoGenerateMetricsModal: (value: boolean) => void;
  datasource?: DataSourceInterfaceWithParams;
  size?: "sm" | "md";
};

export default function AutoGenerateMetricsButton({
  setShowAutoGenerateMetricsModal,
  datasource,
  size,
}: Props) {
  const { datasources } = useDefinitions();
  const showButton: boolean = useMemo(() => {
    if (datasource) {
      // If a datasource was passed in, only show the button if the datasource supports auto metrics
      return datasource.properties?.supportsAutoGeneratedMetrics || false;
    }

    // Otherwise, only show the button if at least one datasource supports auto metrics
    return datasources.some(
      (datasource) =>
        datasource.properties?.supportsAutoGeneratedMetrics || false
    );
  }, [datasource, datasources]);

  return (
    <>
      {showButton ? (
        <Button
          size={size}
          variant="outline"
          onClick={() => setShowAutoGenerateMetricsModal(true)}
          mr="2"
        >
          Discover Metrics
        </Button>
      ) : null}
    </>
  );
}
